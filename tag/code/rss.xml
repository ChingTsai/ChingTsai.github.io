<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ChingTsai.github.io/chingtsai.github.io/</title>
   
   <link>http://ChingTsai.github.io/chingtsai.github.io/</link>
   <description>Code, Food, Photo and some Geek stuff ...</description>
   <language>en-uk</language>
   <managingEditor> Ching Tsai</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>My new project on Github - BrakeValve</title>
	  <link>//My-new-project-on-Github-BrakeValve</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-09-22T09:16:48+08:00</pubDate>
	  <guid>//My-new-project-on-Github-BrakeValve</guid>
	  <description><![CDATA[
	     <p>幾個月前和幾位朋友開啟了一個開源的專案 - <a href="%E7%85%9E%E8%BB%8A%E9%96%A5">BrakeValve</a>，這個專案主要是為了幫助在 Steam 數位遊戲的銷售平台上面消費的使用者，
決定要不要再某個時間點購買某個遊戲。 取名的來源是 Steam 背後的母公司是 Valve ，而取名叫做煞車閥是希望能幫購買者在一頭熱想購買遊戲得時候可以煞車冷靜一下 XDD</p>

<blockquote>
<p>早買早享受，晚買享折扣</p>
</blockquote>

<p>這是我們出發的想法，任何人都想當一個聰明的買家。消費者不想要才剛買一個遊戲，然後過沒幾天就特價了，又或者等一個遊戲特價，
但是過了一兩個月才特價，然後玩的興致也沒了。而我自己也是常在 Steam 上購買遊戲的人，
所以我很清楚大家會喜歡這個平台 Steam 並不是因為它會銷售最新推出的遊戲，而是許多舊的遊戲會不定時打折。所以我們就是想能掌握到這些其中的規律，
並且希望可以適用於所有的遊戲（或者至少是大家想玩的遊戲）</p>

<p>以網路上 survey 後的結果，現在大部分對於 Steam 上面遊戲的數據的報表，都僅限於提供歷史最低價格以及現在時價等簡單的數據。如 <a href="https://steamspy.com/sale/">steamspy</a>  。
我們希望的是提供更具指標性的資訊。因此我們希望藉由取的某一遊戲的歷史資料 : 降價頻率，價降幅度的平均及標準差、遊戲性質、銷量、公司品牌等等 feature，來 predict 該遊戲近期是否會降價。</p>

<p>我們最後的方案是蒐集各種 Steam 遊戲，他們在過去一段時間內，每一天的價格資料，並且在加上各個遊戲的屬性 feature 作為我們的 training dataset，
（詳細可以看<a href="https://brakevalve.github.io/2016/09/10/Apply-machine-learning.html">這裡</a>） 然後再用 prediction 來分類各個天是要買或不買。做了諸多優化之後（詳細可以看<a href="https://brakevalve.github.io/2016/09/09/Some-data-engineering.html">這裡</a>）
我們達到 80% 的準確度(詳細可以看<a href="https://brakevalve.github.io/2016/09/08/Evaluation.html">這裡</a>），算是一個蠻理想的成效。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/result.png" alt="fornt_page"></p>

<p>不過這離我們的目標還有一段距離，因為我們的 prediction 只有做在 83 個熱門遊戲上，所以近期我們會推出，Chrome 插件應用，
讓使用者可以在瀏覽 Steam 銷售的網頁就可以知道 predict 結果。並且蒐集使用者想要 predict 的遊戲，
做為我們之後擴展 dataset 的目標。</p>

<p>另外其實也有很多想做的優化，比如說，我們在做遊戲種類的 Feature 的時候，是做蠻白痴的 Binary vectorise ，
這樣的結果會讓這些 feature 變成一個很不 dense 的 matrix ，這樣不僅浪費空間，並且就少了種類和種類之間得關係的資訊，
所以如果可以裡把這寫名詞轉到 Word2vec 的空間上，說不定就可以提高更好的 performance。
不過這些還在規劃中，實際還是先能在 Chrome 市集上市，然後吸收使用者的回饋比較重要。</p>

<p>如果有興趣的話可以到我們的 <a href="https://github.com/BrakeValve">Github</a> 看看，非常歡迎各位回饋，並且喜歡的話幫我們 star 一下專案～</p>

	  ]]></description>
	</item>

	<item>
	  <title>CentOS-網管小筆記 : CPU Frequency Hack</title>
	  <link>//CentOS%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-CPU-Frequency-Hack</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-22T10:30:41+08:00</pubDate>
	  <guid>//CentOS%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-CPU-Frequency-Hack</guid>
	  <description><![CDATA[
	     <p>基於之前比賽的需求，所以 survey 過 Linux 底下如何 ad-hoc 動態調整 CPU 頻率。在普通 consumer 硬體架構下，超頻降頻早已不是什麼稀奇的事情，不過在伺服器上並且在 Linux 下作這件事情就不是這麼常見。主要原因伺服器在設計上本來就是以穩定為主，如果你需要更高的頻率，你應該是要更換高頻率的CPU。這也為什麼 Intel Server class 的 CPU 會有這麼多型號。並且伺服器設計上就是必須要以最高效能的方式運作，不過在一些特殊的情況來說，有時候最高頻率的並不是最 efficiency 使用電源。闢如你有大量的 CPU core 作 Multi Agent simulation，可想像的是 Cores 大部分的時間都在 exchange 資訊，而不是作 Compute ， 所以提高頻率所增高的效率，並不有效。其實 OS 本身就已經自動調整頻率的功能，但這對於我來說並不足夠，因為調整等於是 unpredictable 是個 black box。由於當時比賽需要很精準的控制電量，並且確保所有程式都可在最有效的情況輸出，就需要有能手動控制頻率的技術。</p>

<ul>
<li>以下教學並不會為損壞你的設備負責，請確認自己了解以下指令的風險在繼續。</li>
<li>以下這些指令都是 Linux 內建的，不過你會需要 root 權限。</li>
<li>以下教學只適用於 Intel CPU</li>
</ul>

<h4>Know Your Equipment</h4>

<p>首先必須了解自己的 CPU 型號，可以用下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cat</span> <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="n">cpuinfo</span> <span class="o">|</span> <span class="n">grep</span> <span class="s">&#39;model name&#39;</span> <span class="o">-</span><span class="n">m</span> <span class="mi">1</span>
  <span class="n">model</span> <span class="n">name</span>    <span class="p">:</span> <span class="n">Intel</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">Xeon</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">CPU</span> <span class="n">E5</span><span class="o">-</span><span class="mi">2690</span> <span class="n">v3</span> <span class="err">@</span> <span class="mf">2.60</span><span class="n">GHz</span>
</code></pre></div>
<p>適用於以下的指令的最少會需要 v1 以後的CPU ，也就是 <code>Sandy Bridge-EP</code> 以後的。</p>

<h4>ACPI modules</h4>

<p>再來我們要打入 ACPI 的 Kernel Modules，ACPI (Advanced Configuration and Power Interface) 提供Kernel 可以更 fine-grain 控制硬體電源，以及更精準的讀數。</p>
<div class="highlight"><pre><code class="language-perl" data-lang="perl"><span class="o">&gt;</span> <span class="n">sudo</span> <span class="n">modprobe</span> <span class="n">acpi</span><span class="o">-</span><span class="n">cpufreq</span>
</code></pre></div>
<p>若有以下資訊，有可能已經載入相對應的 Modules 。
```perl</p>

<blockquote>
<p>modprobe: ERROR: could not insert &#39;acpi_cpufreq&#39;: Device or resource busy
```</p>
</blockquote>

<h4>CPU Frequency Control</h4>

<p>再來我們可以了解我們可以用的頻率有哪些</p>

<p>先到以下位址</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cd</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span>
<span class="o">&gt;</span> <span class="n">ls</span>
  <span class="n">cpu0</span> <span class="n">cpu12</span> <span class="n">cpu16</span> <span class="n">cpu2</span> <span class="n">cpu23</span> <span class="n">cpu27</span> <span class="n">cpu30</span> <span class="n">cpu34</span> <span class="n">cpu38</span> <span class="n">cpu41</span> <span class="n">cpu45</span> <span class="n">cpu6</span> <span class="n">cpuidle</span> <span class="n">modalias</span> <span class="n">power</span> <span class="n">cpu1</span> <span class="n">cpu13</span> <span class="n">cpu17</span> <span class="n">cpu20</span> <span class="n">cpu24</span> <span class="n">cpu28</span> <span class="n">cpu31</span> <span class="n">cpu35</span> <span class="n">cpu39</span> <span class="n">cpu42</span> <span class="n">cpu46</span> <span class="n">cpu7</span> <span class="n">intel_pstate</span> <span class="n">offline</span> <span class="n">present</span> <span class="n">cpu10</span> <span class="n">cpu14</span> <span class="n">cpu18</span> <span class="n">cpu21</span> <span class="n">cpu25</span> <span class="n">cpu29</span> <span class="n">cpu32</span> <span class="n">cpu36</span> <span class="n">cpu4</span> <span class="n">cpu43</span> <span class="n">cpu47</span> <span class="n">cpu8</span> <span class="n">kernel_max</span> <span class="n">online</span> <span class="n">uevent</span> <span class="n">cpu11</span> <span class="n">cpu15</span> <span class="n">cpu19</span> <span class="n">cpu22</span> <span class="n">cpu26</span> <span class="n">cpu3</span> <span class="n">cpu33</span>  <span class="n">cpu37</span> <span class="n">cpu40</span> <span class="n">cpu44</span> <span class="n">cpu5</span> <span class="n">cpu9</span> <span class="n">microcode</span> <span class="n">possible</span>
</code></pre></div>
<p>這裡可以看到你可以控制所有的CPU ， 這裡如果你有開啟Hyper-Threading ，可以看到 cpu 數目會變 double ，這裡我們先隨便跳一個cpu。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cd</span> <span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span>
<span class="o">&gt;</span> <span class="n">ls</span>
  <span class="n">affected_cpus</span> <span class="n">cpuinfo_max_freq</span> <span class="n">cpuinfo_transition_latency</span> <span class="n">scaling_available_governors</span> <span class="n">scaling_governor</span> <span class="n">scaling_min_freq</span> <span class="n">cpuinfo_cur_freq</span>  <span class="n">cpuinfo_min_freq</span> <span class="n">related_cpus</span> <span class="n">scaling_driver</span> <span class="n">scaling_max_freq</span> <span class="n">scaling_setspeed</span>
</code></pre></div>
<p>幾個東西可查看</p>

<ul>
<li><code>cpuinfo_min_freq</code> : CPU 可以調整的最低頻率</li>
<li><code>cpuinfo_max_freq</code> : CPU 可以調整的最高頻率</li>
</ul>

<p>幾個比較重要的東西可以調</p>

<ul>
<li><code>scaling_min_freq</code> : CPU 運作下的最低頻率</li>
<li><code>scaling_max_freq</code> : CPU 運作下的最高頻率</li>
</ul>

<p>所以你可以藉由調整的上述兩個 upper bound 和 lower bound ，來設定 CPU 頻率的運作時候的範圍調法如下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">echo</span> <span class="p">{</span><span class="err">欲調整的頻率</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_min_freq</span>
<span class="n">example</span> <span class="p">:</span>
<span class="o">&gt;</span> <span class="n">echo</span> <span class="mi">2000000</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_min_freq</span>
</code></pre></div>
<p>輸完後可以再 <code>cat</code> 一次來確認修改完成。</p>

	  ]]></description>
	</item>

	<item>
	  <title>CentOS 網管小筆記 : 凍結帳號及強制登出</title>
	  <link>//CentOS-%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-%E5%87%8D%E7%B5%90%E5%B8%B3%E8%99%9F%E5%8F%8A%E5%BC%B7%E5%88%B6%E7%99%BB%E5%87%BA</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-11T16:09:36+08:00</pubDate>
	  <guid>//CentOS-%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-%E5%87%8D%E7%B5%90%E5%B8%B3%E8%99%9F%E5%8F%8A%E5%BC%B7%E5%88%B6%E7%99%BB%E5%87%BA</guid>
	  <description><![CDATA[
	     <p>以前曾經管理一個 8 node 的 cluster 一段時間，而當時有個需求就是再某一段時間要對整個 cluster 作封測，由於當時 cluster 有外借一個帳號給別人，所以就會擔心再封得時候其他人跑進來玩耍，這樣封測的結果就不準了。但是如果直接刪除帳號到時候再開給他，顯得麻煩，於是就 survey 了一下如何凍結帳號，最好是可以凍結後時間到了就會自動解鎖，設定完後就不用煩惱。</p>

<ul>
<li>以下的這些指令都是 Linux 內建的，不過你會需要 root 權限。</li>
</ul>

<h4>管理密碼 &gt; passwd</h4>

<p>沒想到這個建密碼一定會用到的指令還有其他強大功能，我利用管理特定使用者的密碼狀態，來達到管理特定使用者的長好是否有效的效果，另外<code>usermod</code> 也有類似的功能。 </p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#凍結帳號</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">l</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">l</span> <span class="n">ctsai</span>
<span class="c">#解鎖帳號</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">u</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
<span class="c">#檢驗帳號狀態</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">S</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">S</span> <span class="n">SISQUAKE</span>
<span class="c">#凍結的狀態</span>
<span class="n">SISQUAKE</span> <span class="n">LK</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">11</span> <span class="mi">0</span> <span class="mi">99999</span> <span class="mi">7</span> <span class="o">-</span><span class="mi">1</span> <span class="p">(</span><span class="err">密碼已鎖定。</span><span class="p">)</span>
<span class="c">#解鎖的狀態</span>
<span class="n">SISQUAKE</span> <span class="n">PS</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">11</span> <span class="mi">0</span> <span class="mi">99999</span> <span class="mi">7</span> <span class="o">-</span><span class="mi">1</span> <span class="p">(</span><span class="err">密碼已設定，</span><span class="n">SHA512</span> <span class="err">加密法。</span><span class="p">)</span>
</code></pre></div>
<h4>強制退出使用者 &gt; skill</h4>

<p>當你把某個使用者的密碼失效後，系統並不會馬上把該使用者退出，他原本登入的 session 還會繼續 keep 住，並且可以繼續正常執行，如果你真要馬上把該使用者被登出，就可以使用以下指令：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
</code></pre></div>
<p>這個指令真的十分兇猛，這是由於給的 signal 是 KILL ，即是立即終止，所以不管是這個使用者的 session 或是 process 都會馬上清光光，請小心使用。</p>

<h4>排程解鎖 &gt; at</h4>

<p>有另一個指令 <code>chage</code> 可以限制某個帳號的有效時間 ， 不過如果要做到自動的解鎖的話就沒有現有的指令可以使用，所以這裡就引入一個很實用的排程指令 <code>at</code> ，這裡的排程是特定排程，非例行排程，也就是指定時間執行，不會重複定時執行。</p>

<p>1.首先要開啟 <code>atd</code> 服務(CentOS 6 以下)</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">service</span> <span class="n">atd</span> <span class="n">restart</span>
</code></pre></div>
<p>不想每次重開都開就記得下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chkconfig</span> <span class="n">atd</span> <span class="n">on</span>
</code></pre></div>
<p>2.指定時間執行</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">at</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">09</span>
</code></pre></div>
<p>3.下完後會進去 <code>at</code>  的 bash ，可以想像就是到時候要執行的 script ，依序打入要執行的指令
結束時按 <code>ctrl + D</code></p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#example :</span>
<span class="n">at</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span>
<span class="n">at</span><span class="o">&gt;</span> <span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
<span class="n">at</span><span class="o">&gt;</span>
<span class="n">job</span> <span class="mi">21</span> <span class="n">at</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span>
       <span class="o">^</span> <span class="n">at</span> <span class="n">job</span> <span class="n">ID</span>
</code></pre></div>
<p>4.查詢at job 的bash</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">at</span> <span class="o">-</span><span class="n">c</span> <span class="o">+</span> <span class="p">{</span><span class="n">at</span> <span class="n">job</span> <span class="n">ID</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">at</span> <span class="o">-</span><span class="n">c</span> <span class="mi">21</span>
</code></pre></div>
<p>5.查看所有at job 序列</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">atq</span>
<span class="c">#example :</span>
<span class="n">atq</span>
<span class="mi">21</span>  <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="n">a</span> <span class="n">root</span>
</code></pre></div>
<h4>Reference</h4>

<p><a href="http://linux.vbird.org/linux_basic/0410accountmanager.php">鳥哥的 Linux 私房菜</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 94 : Binary Tree Inorder Traversal</title>
	  <link>//LeetCode-94-Binary-Tree-Inorder-Traversal</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-11T11:05:43+08:00</pubDate>
	  <guid>//LeetCode-94-Binary-Tree-Inorder-Traversal</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes&#39; values.</p>

<p>For example:
Given binary tree</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"> <span class="mi">1</span>
  \
   <span class="mi">2</span>
  <span class="o">/</span>
 <span class="mi">3</span>
</code></pre></div>
<p>return [1,3,2]</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題如果用 recursive 的話十分簡單，但是如果要用 iterative 作的話就不是這麼容易，最主要的原因是你無法用 call recursive 的順序來決定你 output value 的順序。</p>

<h3>Guide</h3>

<p>首先你需要有一個 Stack 來倒序記錄，由於 Inorder 是 中-&gt;左-&gt;右 ，所以必須有一個方式來記錄走到最左之間的所有 Node 。 所以作法就是每次 iteration 先看 <code>Stack Q</code> 的 top， 如果他有左子孫的話，就把它加上去。所以我們會走到樹的最左邊，並且 <code>Stack Q</code> 到目前為止的 Node 。 此時 top 就沒有左子孫，因為此時是作 Inorder ， 所以這時候我們要先把 top 的 value 輸出 。 並判斷他有沒有右子孫，如果有的話就要加到 <code>Stack Q</code> 上面。 這裡有一個很重要的步驟就是，要能標記哪些 Node 已經輸出，這樣才不會重複輸出， 所以在把 top 的 value 輸出後，除了要 removeFirst，並且把 <code>values</code> 設成 <code>Integer.MIN_VALUE</code> 來標示已經輸出了。如此做到 <code>Stack Q</code> 為空的時候後停止。以下就用跟上面一樣的例子，來看 <code>Stack Q</code> 在整個演算法之中的情況，應該就會比較好理解。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span> <span class="p">]</span>    <span class="p">[</span> <span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="mi">3</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">1</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>
        <span class="mi">1</span>      <span class="mi">2</span>      <span class="mi">2</span>      <span class="mi">3</span>      <span class="mi">4</span>      <span class="mi">5</span>          
</code></pre></div>
<blockquote>
<ol>
<li>put root 1</li>
<li>top node 1 has no left child -&gt; pop and output value, top node 1 has right child -&gt; put right child 2</li>
<li>top node 2 has left child -&gt; put left child 3 and skip the rest</li>
<li>top node 3 has no left child -&gt; pop and output value, top node 3 has no right child then do nothing</li>
<li>top node 2 has no left child -&gt; pop and output value, top node 2 has no right child then do nothing</li>
</ol>
</blockquote>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for a binary tree node.</span>
<span class="cm"> * public class TreeNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     TreeNode left;</span>
<span class="cm"> *     TreeNode right;</span>
<span class="cm"> *     TreeNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<h3>Postorder</h3>

<p>如此掌握 Inorder 的作法後，用類似的模式也可以做到 Postorder。</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">postorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Shell Script : Jekyll Markdown Generator</title>
	  <link>//Shell-Script-Jekyll-Markdown-Generator</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T22:56:00+08:00</pubDate>
	  <guid>//Shell-Script-Jekyll-Markdown-Generator</guid>
	  <description><![CDATA[
	     <p>很多人都問我說為什麼要用 MAC？除了做工精良，續航力高，還有一點非常棒的就是他可以和 Linux 共用大部分的 Unix Script。以下就用一個小小的例子來解釋能寫一些簡單的 Script 可以讓工程師一天過的更愉快。</p>

<p>一開始的緣由在於 Jekyll 的 Markdown 有一個既定的格式，就是檔名要是 <code>日期-標題.md</code> 並且內部要以特定的 tag ，不過如果每次發一篇文章都還要去填寫日期的話，並修改檔名的話，就顯得太費工夫了，所以初始的概念就是能 input <code>title</code> 和 <code>tag</code> ， 然後剩下重複的格式就交由 Script。</p>

<h3>I/O</h3>

<p>所以首先就先做簡單 I/O 來得到 <code>title</code> 和 <code>tag</code> 。</p>

<p>First of all, we should handle some I/O to get the input arguments <code>title</code> and <code>tag</code> .</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">printf</span> <span class="s">&quot;Title : &quot;</span>
<span class="n">read</span> <span class="n">title</span>
<span class="n">printf</span> <span class="s">&quot;Tags : &quot;</span>
<span class="n">read</span> <span class="n">tags</span>
</code></pre></div>
<h3>Parse</h3>

<p>再來由於我們要直接把 <code>title</code> 拿來當做檔名，不過由於其中多少會有一些標點符號，在這裡我們就要先把他們移除。所以我們用 <code>sed</code> 來做取代的動作，由於 <code>sed</code> 支援正規表示，所以我們可以用 <code>[[:punct:]]</code> 來指定標點符號，若之後有延伸的取代動作的話可以參考<a href="https://en.wikipedia.org/wiki/Regular_expression">這裡</a>更多正規表示。</p>

<p>Next, since there will be some punctuations in the title (e.g. .,;/?), we should remove them before we use it as part of the filename later. Here, we are using <code>sed</code> to remove the punctuations. Fortunately, <code>sed</code> support regular expression, so we can use <code>[[:punct:]]</code> to represent the punctuations and remove them. You could find more regular expression <a href="https://en.wikipedia.org/wiki/Regular_expression">here</a> , if we want to do more extensions.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $title | sed -e &quot;s/[[:punct:]]//g&quot;`</span>
</code></pre></div>
<p>最後再把空白都換成一槓。
Also, we do the same handling to the space, but this time we replace it with <code>-</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $parse | sed -e &quot;s/ /-/g&quot;`</span>
</code></pre></div>
<h3>Date</h3>

<p>再來我們要取得 Post 當下的時間，把它加到檔名裡，這裡使用 <code>date</code> 來取得時間並且用內建輸出syntax 。這裡列舉一些簡單的表示方式。</p>

<p>We also need to get the time as the create time when we lunch the script. We use <code>date</code> to get then current time, and since it supports output format , we can simply transform the date to the format we want. Here is a handy lookup table.</p>

<table><thead>
<tr>
<th style="text-align: center">Example</th>
<th style="text-align: center">Format</th>
<th style="text-align: center">Outcome</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">年(year)</td>
<td style="text-align: center">％Y</td>
<td style="text-align: center">2016</td>
</tr>
<tr>
<td style="text-align: center">月(month)</td>
<td style="text-align: center">%m</td>
<td style="text-align: center">03</td>
</tr>
<tr>
<td style="text-align: center">日(day)</td>
<td style="text-align: center">%d</td>
<td style="text-align: center">07</td>
</tr>
<tr>
<td style="text-align: center">時(hour)</td>
<td style="text-align: center">%H</td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td style="text-align: center">分(minute)</td>
<td style="text-align: center">%M</td>
<td style="text-align: center">12</td>
</tr>
<tr>
<td style="text-align: center">秒(second)</td>
<td style="text-align: center">%S</td>
<td style="text-align: center">00</td>
</tr>
</tbody></table>

<p>如此我們可以把現在時間轉成我們要的格式。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># 2016-03-07</span>
<span class="n">create_date</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d&quot;`</span>
<span class="c"># 2016-03-07 22:56:00</span>
<span class="n">create_date_time</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d %H:%M:%S&quot;`</span>
</code></pre></div>
<h3>Demo</h3>

<p>最後展示一下使用的情況</p>

<p>Here is the screenshot.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">sh</span> <span class="n">auto_post</span><span class="o">.</span><span class="n">sh</span>
  <span class="n">Title</span> <span class="p">:</span> <span class="n">Shell</span> <span class="n">Script</span> <span class="p">:</span> <span class="n">Jekyll</span> <span class="n">Markdown</span> <span class="n">Generator</span>
  <span class="n">Tags</span> <span class="p">:</span> <span class="n">code</span>
<span class="o">&gt;</span> <span class="n">ls</span> <span class="n">_posts</span><span class="o">/</span>
  <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
<span class="o">&gt;</span> <span class="n">cat</span> <span class="n">_posts</span><span class="o">/</span><span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
  <span class="o">---</span>
  <span class="n">layout</span> <span class="p">:</span> <span class="n">post</span>
  <span class="n">cover</span><span class="p">:</span> <span class="n">false</span>
  <span class="n">title</span><span class="p">:</span> <span class="s">&#39;Shell Script : Jekyll Markdown Generator&#39;</span>
  <span class="n">date</span><span class="p">:</span> <span class="s">&#39;2016-03-07 22:56:00&#39;</span>
  <span class="n">tags</span><span class="p">:</span> <span class="n">code</span>
  <span class="n">subclass</span><span class="p">:</span> <span class="s">&#39;post tag-code&#39;</span>
  <span class="n">categories</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="n">cover</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="o">---</span>
</code></pre></div>
<h3>Source Code</h3>

<p>由於不同得 template 會有不同 Front Matter ， 所以可以自行視需求多加argument 進去，不過作法是雷同的。可以從<a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">這裡</a>拿到原始碼。</p>

<p>Since different Jekyll template has different Front Matter, feel free to add more arguments in the script to make it compatible to your Jekyll template. You can find the Source code <a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">here</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 147 : Insertion Sort List</title>
	  <link>//LeetCode-147-Insertion-Sort-List</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T14:32:49+08:00</pubDate>
	  <guid>//LeetCode-147-Insertion-Sort-List</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Sort a linked list using insertion sort.</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題很有意思， insertion sort 可能是大家最熟悉的 n^2 sorting ， 原本認為用 array 來作 insert 要花很多時間在做資料搬移，但當做在單向的 LinkedList 卻用變得更棘手。</p>

<h3>Guide</h3>

<p>第一個遇到的問題就是要 maintain 前後兩個 node 的 next 要能指對。所以當有一個直鏈：<code>A-&gt;B-&gt;C</code> 若要用 <code>D</code> 取代  <code>B</code> 我就要確保 <code>A-&gt;D</code> 和 <code>D-&gt;C</code> 。 這個可以用一個暫存的 Object pre 來儲存。第二個問題就是 head 是沒有 parent ， 所以要用一個空的dummy_head 來當作假的 head。 最後就是這題用一個很不像傳統 insertion sort 的解法，也就是分成兩個鏈，一個是 dummy 開頭的 sorted 鏈 ， 一個就是原本 input 進來的鏈。所以每次從 input 鏈抓一個 node <code>cur</code> ， 然後到 sorted 鏈裡找到是適合的地方插進去，這樣的作法會比用同一條鏈還 maintain 兩個鏈來的容易很多。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for singly-linked list.</span>
<span class="cm"> * public class ListNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     ListNode next;</span>
<span class="cm"> *     ListNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">ListNode</span> <span class="n">dummy_head</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">insertionSortList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="n">ListNode</span> <span class="n">pre</span><span class="o">,</span><span class="n">cur</span><span class="o">,</span><span class="n">iter</span><span class="o">;</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">cur</span> <span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">iter</span> <span class="o">=</span> <span class="n">dummy_head</span><span class="o">;</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">val</span><span class="o">){</span>
                <span class="n">iter</span><span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">cur</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">iter</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dummy_head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Jekyll Markdown Syntax Highlighting</title>
	  <link>//Jekyll-Markdown-Syntax-Highlighting</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T13:00:00+08:00</pubDate>
	  <guid>//Jekyll-Markdown-Syntax-Highlighting</guid>
	  <description><![CDATA[
	     <p>當初會被吸引來用 Jekyll 還來搭建這個 Blog ，其中一個很大的原因，也是因為內建的 Markdown expression 可以很方便的幫一些範例 Code 做美美的 Syntax Highlighting。不過 Highlighting 的 style 通常都被 Template 寫死在 css 裡。所以當我在用這個 Template 我就很樣把預設的 style 換掉，所以在做了一下 Serve 找到了修改的方法。</p>

<h3>Pygments</h3>

<p>首先 Jekyll 得標色其實是用一個 python 的 Syntax highlighter <a href="http://pygments.org/">Pygments</a> 所 gen 出來的，Pygments 其實非常強大，支援100多種語言並且輸出成各式各樣的格式，這裡我們是使用 <code>html</code>。 所以首先我們要先下載做新版本的 <a href="http://pygments.org/">Pygments</a> ， 並用 python 安裝。</p>

<p>The Syntax Highlighting style is actually extracted form a generic syntax highlighter written in python called <a href="http://pygments.org/">Pygments</a>. Pygments supports 300 languages and other text formats. For here, we are using the  <code>html</code> style. First of all, download the latest version of <a href="http://pygments.org/">Pygments</a>, and install it with python.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">tar</span> <span class="n">xf</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mf">3.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
<span class="n">cd</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mi">3</span>
<span class="n">sudo</span> <span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</code></pre></div>
<h3>Configuration</h3>

<p>再來確認你的 <code>_config.yml</code> 當中的 <code>highlighter</code> 設為 <code>pygments</code></p>

<p>Make sure you set <code>highlighter</code> into <code>pygments</code> in your <code>_config.yml</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># Jykell configuration</span>
<span class="n">markdown</span><span class="p">:</span> <span class="n">redcarpet</span>
<span class="n">highlighter</span><span class="p">:</span> <span class="n">pygments</span>
<span class="o">...</span>
</code></pre></div>
<p>把你的路徑移到 Template 的 css 資料夾下 ， 以我的 Template 是在 <code>/assets/css</code> 你可以看到會有一個 <code>syntax.css</code> ，這個就是用來標色的 style 。</p>

<p>Change you directory to the css folder in your Template. In my case, it is located at <code>/assets/css</code>. You should find a <code>syntax.css</code> which denotes the syntax highlighting.</p>

<h3>Select Highlight Style</h3>

<p>此時你可以到 <a href="http://pygments.org/demo/3913075/">Pygments官網</a> 去選擇你喜歡的 style ， 這裡我使用 <code>monokai</code> 這個 style 。 最後下以下指令，把新的 syntax 套色導到 <code>syntax.css</code>。</p>

<p>At this point, you can pick your favorite color highlighting style <a href="http://pygments.org/demo/3913075/">here</a>. I am using style  <code>monokai</code> in this demonstration. Finally, enter the scripts below to replace the  <code>syntax.css</code>。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pygmentize</span> <span class="o">-</span><span class="n">S</span> <span class="n">monokai</span> <span class="o">-</span><span class="n">f</span> <span class="n">html</span> <span class="o">&gt;</span> <span class="n">syntax</span><span class="o">.</span><span class="n">css</span>
</code></pre></div>
<h3>Background Color</h3>

<p>最後要注意的是，code block 底色的 css 並不是寫在 <code>syntax.css</code> 裡面，所以如果你是從白底套色改成黑底套色， 可能就會發現字都變不見了，所以只要手動修改 code block 底色就可以了，通常都是 <code>pre</code> 這個 class 的 <code>background-color</code> ， 以我的 Template 就在 <code>screen.css</code> 裡面。</p>

<p>Last but not least, if you change the style from a white background-color theme to a background-color theme, you will notice that the words are disappeared. This is because that the code block background-color is not denoted in the <code>syntax.css</code>. You should change it manually. It is usually denoted in  <code>pre</code>  css class. So I simply change the <code>pre</code> class <code>background-color</code> in <code>screen.css</code>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 46 : Permutations</title>
	  <link>//LeetCode-46-Permutations</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T10:18:00+08:00</pubDate>
	  <guid>//LeetCode-46-Permutations</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</p>
</blockquote>

<h3>Initial Though</h3>

<p>基本上的概念就是對一個 input integer array 做隨機排序，使個 Backtracking 的經典題目。</p>

<h3>Guide</h3>

<p>這裡可以想像就是在對一個 N-ary Tree 用 DFS 來遍歷， 而 N 就是總共所有的 integer array。所以可以想像每下一層就是要從剩下的數字中挑一個放到 <code>sub</code>，所以這裡我用一個 <code>HashSet</code> 來記錄已經取出的數字。如此做到所有的數字都被拿完，也就是 <code>sub</code> 和 input array 一樣長，此時就把 <code>sub</code> clone 一份到 <code>result</code> 裡。並且回傳的時候要把自己放到 <code>sub</code> 尾端的數字 pop 掉，另外也要移除 <code>HashSet</code> 裡的同一個數字。這樣從底部回去的時候，之前選的字才能被之後 sub array 選到。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span> <span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">,</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span><span class="o">){</span>

        <span class="k">if</span><span class="o">(</span><span class="n">k</span><span class="o">==</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span><span class="n">sub</span><span class="o">.</span><span class="na">clone</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">h</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                <span class="n">sub</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">h</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sub</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
                <span class="n">h</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
