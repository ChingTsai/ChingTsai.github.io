<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd"
  xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/">
  <channel>
    <title>Make Today Better Than Yesterday</title>
    <link>http://ChingTsai.github.io/chingtsai.github.io/</link>
    <description>Code, Food, Photo and some Geek stuff ...</description>
    <pubDate>Thu, 11 Aug 2016 20:45:17 +0800</pubDate>
    <item>
      <title>抹茶千層派試作</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//%E6%8A%B9%E8%8C%B6%E5%8D%83%E5%B1%A4%E6%B4%BE%E8%A9%A6%E4%BD%9C</link>
      <description>&lt;p&gt;終於有時間可以發一篇關於food的post了，我很喜歡看youtube來學料理，所以這一篇也不例外，由於在嘗試網路上的食譜的時候，往往都會遇到食譜所寫的和實際操作有落差，而這一篇主要是分享我嘗試食譜的過程心得，以及一些改進的想，希望可以幫到那些想要嘗試同一份食譜的人，也因此需要詳細教學以及食譜的可以到&lt;a href=&quot;http://www.amandatastes.com/%E3%80%90%E6%9B%BC%E9%A3%9F%E6%85%A2%E8%AF%AD%E3%80%91%E6%8A%B9%E8%8C%B6%E5%8D%83%E5%B1%82%E8%9B%8B%E7%B3%95/&quot;&gt;這裡&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 11 Aug 2016 20:45:17 +0800</pubDate>
      <dc:date>2016-08-11T20:45:17+08:00</dc:date>
    </item>
    <item>
      <title>CentOS-網管小筆記 : CPU Frequency Hack</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//CentOS%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-CPU-Frequency-Hack</link>
      <description>&lt;p&gt;基於之前比賽的需求，所以 survey 過 Linux 底下如何 ad-hoc 動態調整 CPU 頻率。在普通 consumer 硬體架構下，超頻降頻早已不是什麼稀奇的事情，不過在伺服器上並且在 Linux 下作這件事情就不是這麼常見。主要原因伺服器在設計上本來就是以穩定為主，如果你需要更高的頻率，你應該是要更換高頻率的CPU。這也為什麼 Intel Server class 的 CPU 會有這麼多型號。並且伺服器設計上就是必須要以最高效能的方式運作，不過在一些特殊的情況來說，有時候最高頻率的並不是最 efficiency 使用電源。闢如你有大量的 CPU core 作 Multi Agent simulation，可想像的是 Cores 大部分的時間都在 exchange 資訊，而不是作 Compute ， 所以提高頻率所增高的效率，並不有效。其實 OS 本身就已經自動調整頻率的功能，但這對於我來說並不足夠，因為調整等於是 unpredictable 是個 black box。由於當時比賽需要很精準的控制電量，並且確保所有程式都可在最有效的情況輸出，就需要有能手動控制頻率的技術。&lt;/p&gt;
</description>
      <pubDate>Tue, 22 Mar 2016 10:30:41 +0800</pubDate>
      <dc:date>2016-03-22T10:30:41+08:00</dc:date>
    </item>
    <item>
      <title>CentOS 網管小筆記 : 凍結帳號及強制登出</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//CentOS-%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-%E5%87%8D%E7%B5%90%E5%B8%B3%E8%99%9F%E5%8F%8A%E5%BC%B7%E5%88%B6%E7%99%BB%E5%87%BA</link>
      <description>&lt;p&gt;以前曾經管理一個 8 node 的 cluster 一段時間，而當時有個需求就是再某一段時間要對整個 cluster 作封測，由於當時 cluster 有外借一個帳號給別人，所以就會擔心再封得時候其他人跑進來玩耍，這樣封測的結果就不準了。但是如果直接刪除帳號到時候再開給他，顯得麻煩，於是就 survey 了一下如何凍結帳號，最好是可以凍結後時間到了就會自動解鎖，設定完後就不用煩惱。&lt;/p&gt;
</description>
      <pubDate>Fri, 11 Mar 2016 16:09:36 +0800</pubDate>
      <dc:date>2016-03-11T16:09:36+08:00</dc:date>
    </item>
    <item>
      <title>LeetCode 94 : Binary Tree Inorder Traversal</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//LeetCode-94-Binary-Tree-Inorder-Traversal</link>
      <description>&lt;blockquote&gt;
&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes&amp;#39; values.&lt;/p&gt;

&lt;p&gt;For example:
Given binary tree&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  \
   &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;
 &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;return [1,3,2]&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Fri, 11 Mar 2016 11:05:43 +0800</pubDate>
      <dc:date>2016-03-11T11:05:43+08:00</dc:date>
    </item>
    <item>
      <title>Shell Script : Jekyll Markdown Generator</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//Shell-Script-Jekyll-Markdown-Generator</link>
      <description>&lt;p&gt;很多人都問我說為什麼要用 MAC？除了做工精良，續航力高，還有一點非常棒的就是他可以和 Linux 共用大部分的 Unix Script。以下就用一個小小的例子來解釋能寫一些簡單的 Script 可以讓工程師一天過的更愉快。&lt;/p&gt;
</description>
      <pubDate>Mon, 07 Mar 2016 22:56:00 +0800</pubDate>
      <dc:date>2016-03-07T22:56:00+08:00</dc:date>
    </item>
    <item>
      <title>LeetCode 147 : Insertion Sort List</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//LeetCode-147-Insertion-Sort-List</link>
      <description>&lt;blockquote&gt;
&lt;p&gt;Sort a linked list using insertion sort.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Mon, 07 Mar 2016 14:32:49 +0800</pubDate>
      <dc:date>2016-03-07T14:32:49+08:00</dc:date>
    </item>
    <item>
      <title>Jekyll Markdown Syntax Highlighting</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//Jekyll-Markdown-Syntax-Highlighting</link>
      <description>&lt;p&gt;當初會被吸引來用 Jekyll 還來搭建這個 Blog ，其中一個很大的原因，也是因為內建的 Markdown expression 可以很方便的幫一些範例 Code 做美美的 Syntax Highlighting。不過 Highlighting 的 style 通常都被 Template 寫死在 css 裡。所以當我在用這個 Template 我就很樣把預設的 style 換掉，所以在做了一下 Serve 找到了修改的方法。&lt;/p&gt;
</description>
      <pubDate>Mon, 07 Mar 2016 13:00:00 +0800</pubDate>
      <dc:date>2016-03-07T13:00:00+08:00</dc:date>
    </item>
    <item>
      <title>LeetCode 46 : Permutations</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//LeetCode-46-Permutations</link>
      <description>&lt;blockquote&gt;
&lt;p&gt;Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Mon, 07 Mar 2016 10:18:00 +0800</pubDate>
      <dc:date>2016-03-07T10:18:00+08:00</dc:date>
    </item>
    <item>
      <title>Filter 初體驗</title>
      <link>http://ChingTsai.github.io/chingtsai.github.io//Filter-%E5%88%9D%E9%AB%94%E9%A9%97</link>
      <description>&lt;p&gt;由於本身就有再攝影，所以希望這個 Blog 的圖片儘量都能用自己拍的照片。我對於拍照期望就是能還原最原始當下的情況，所以以往對於濾鏡的使用都嗤之以鼻，認為自己不會用到。不過在客製這個 Blog 的時候，當我把之前 Template 的預設圖換成自己的圖的時候，就總是覺得哪裡怪怪的，挑來挑去都找不到適合的。後來才發現如過要用來裝飾 Blog 用普通色調的圖片就會現得格格不入。如此想想還是嘗試一下濾鏡。&lt;/p&gt;
</description>
      <pubDate>Sun, 06 Mar 2016 00:00:00 +0800</pubDate>
      <dc:date>2016-03-06T00:00:00+08:00</dc:date>
    </item>
    <dc:date>2016-08-11T20:45:17+08:00</dc:date>
  </channel>
</rss>