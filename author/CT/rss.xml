<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ChingTsai.github.io/chingtsai.github.io/</title>
   
   <link>http://ChingTsai.github.io/chingtsai.github.io/</link>
   <description>Code, Food, Photo and some Geek stuff ...</description>
   <language>en-uk</language>
   <managingEditor> Ching Tsai</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>瞞著爹壽司</title>
	  <link>//%E7%9E%9E%E8%91%97%E7%88%B9%E5%A3%BD%E5%8F%B8</link>
	  <author>Ching Tsai</author>
	  <pubDate>2017-02-02T17:08:03+08:00</pubDate>
	  <guid>//%E7%9E%9E%E8%91%97%E7%88%B9%E5%A3%BD%E5%8F%B8</guid>
	  <description><![CDATA[
	     <p><img src="/assets/images/sushi_002.jpg" alt="fornt_page">
今日造訪在微風附近巷弄的瞞著爹壽司，由於還在農曆過年期間，所以雖然是中午時段，但是還提供晚上1680的套餐，感謝家裏金主贊助～</p>

<p><img src="/assets/images/sushi_003.jpg" alt="fornt_page">
等開店的時候在隔壁牆上發現黑色貓貓。
<img src="/assets/images/sushi_004.jpg" alt="fornt_page">
店內擺設十分古色古香，不過音樂偏爵士樂，也代表這家店跟傳統壽司店的定位不同。
<img src="/assets/images/sushi_005.jpg" alt="fornt_page">
壽司台後面擺設各種兇器ＸＤＤ
<img src="/assets/images/sushi_006.jpg" alt="fornt_page">
一樓的位子並不多約十個座位，師傅捏好以後會放在座位前面的碟子上面。
<img src="/assets/images/sushi_010.jpg" alt="fornt_page">
開胃菜是干貝，有提早放回室溫，再將上用噴槍烤過，所以入口即化，有趣的是如果你放太久沒吃，師傅會幫你換上剛烤過的海苔怕你噎到ＸＤ
<img src="/assets/images/sushi_011.jpg" alt="fornt_page">
蒸蛋的部分話，加入明太子以後，整體的口感非常豐富。
<img src="/assets/images/sushi_001.jpeg" alt="fornt_page">
由於這是無菜單的料理，所以師傅會依當天的食材來決定握壽司。所有的握壽司都是刷過醬油調味，所以不需要另外沾醬油。首先的白蝦握壽司十分有趣，根據師父表示，200g 要 NTD1400，比較好奇的是殼是怎麼去掉的，實際吃下去蝦仁本身沒有口感，但是有滿滿蝦子的甜味。柚子胡椒和紅鯛的組合也十分驚豔，比目魚也不是都取鰭邊肥油的部分，是非常清爽的一品。
<img src="/assets/images/sushi_012.jpg" alt="fornt_page">
牡丹蝦的這一品也是很特殊，把蝦頭烤得酥脆並且裡面包壽司米。
<img src="/assets/images/sushi_007.jpg" alt="fornt_page">
來到重頭戲，據說單點一顆要 500，首先在壽司米上鋪上海苔，再疊上完整三片海膽並刷上醬油。
<img src="/assets/images/sushi_008.jpg" alt="fornt_page">
再來把切好的厚片 otoro 包覆在上面，這個據說是黑鮪魚最肥的部位，油花密佈啊～
<img src="/assets/images/sushi_009.jpg" alt="fornt_page">
最後不免俗用噴槍收尾，增加風味及口感。
<img src="/assets/images/sushi_013.jpg" alt="fornt_page">
最上面還放上魚子醬及青蔥，從 otoro 底下可以看到被蓋住的海膽，整個如小拳頭一般大小，誠意十足～ 入口以後，全部食材都融合一起，海膽完全沒有腥味，真的十分意外，otoro 入口即化，不過真的滿嘴都是油ＸＤＤ
<img src="/assets/images/sushi_014.jpg" alt="fornt_page">
松葉蟹的這個煮物非常清淡，可以洗洗剛才 otoro 油膩感。
<img src="/assets/images/sushi_015.jpg" alt="fornt_page">
這散壽司裡面我覺得最特殊的是他的鮭魚子竟然不若往常吃到的這麼鹹，有股微妙的清香甚至有一點點酸甜，感覺有特別泡過其他東西，海膽一如剛才的高水準，唯一不便的就是用筷子在這麼淺的碟子裡面吃有點不便，費了一番功夫把散壽司吃完。
<img src="/assets/images/sushi_017.jpg" alt="fornt_page">
吃到剛才的散壽司其實已經八分飽，這道鰤魚烤魚下巴完全把肚子填飽。
<img src="/assets/images/sushi_018.jpg" alt="fornt_page">
最後清淡的黑芝麻豆腐配松仁。
<img src="/assets/images/sushi_019.jpg" alt="fornt_page">
後來才知道二樓也有座位，不過就不能這麼近距離看師傅捏壽司，總體來說真的讓我對握壽司大開眼界～</p>

	  ]]></description>
	</item>

	<item>
	  <title>First try in 3D printing (Topre to MX slider)</title>
	  <link>//First-try-in-3D-printing-Topre-to-MX-slider</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-08-12T13:28:31+08:00</pubDate>
	  <guid>//First-try-in-3D-printing-Topre-to-MX-slider</guid>
	  <description><![CDATA[
	     <p>幾個月前我添購一個新鍵盤 - HHKB-BT (Happy Hacking Keyboard Bluetooth Edition) 作為取代 Lab 以及使用 MBA 的時候鍵盤，
新的鍵盤雖然有個滑稽的名字，不過由於其特殊的 60% layout以及輕巧的體型，另外採用 Topre 電容軸，在網路上可是有不小人氣阿～
原本就有在關注這把鍵盤，一直覺得這麼經典輕巧的鍵盤竟然沒有藍牙的版本，真的非常可惜。不過最近發現五月的時候竟然有了新的 Bluetooth Version 出現，
所以就戳瞎眼買下去的，由於HHKB的通路非常少，在日本甚至沒有在實體店面販售，一定要跟官網買，所以為此我還特別研究一下日本集貨，
不過由於日幣升值，另外沒有跟到活動，所以其實和請別人代購沒有差很多錢，不過可以比較早就值得了～</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/hhkb.jpg" alt="fornt_page"></p>

<p>用了幾個禮拜以後，除了耗電量並沒有如官方說可以用到三個月，其他都還蠻滿意的，隨身攜帶也不會負擔太大。
P.S. 我還特別換了兩顆 2450 mAh 的 FUJITSU 的電池，不過只撐到一個月多，其實已經很足夠了。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/topreMx.jpg" alt="fornt_page"></p>

<p>講了這麼多，那和3D列印到底又什麼關係勒？
前面講到 HHKB-BT 採用了特殊的 Topre 軸 ， 所以在鍵帽上面是和 Cherry MX軸不相容的，所以想換鍵帽的話就比需要採用
Topre 相容的鍵帽，不過現在 Cherry MX軸是主流， Topre 鍵帽可以選擇的真的是少的可憐，
不過不要誤會，HHKB-BT 原廠附的鍵帽已是比較高級的 PBT塑膠 並且有作特殊的表面處理，摸起來有如肌膚一般滑順，但是又不會油油的。</p>

<blockquote>
<p>若是可以讓 topre 兼容 mx 鍵帽就好了</p>
</blockquote>

<p>我再網路上搜尋一下，發現有不少人有跟我一樣的想法
其中我找到一個有意思的<a href="http://matt3o.com/topre-to-cherry-mx-adapter/">解法</a>，就是利用 3D printer 來印出可兼容的 Slider 取代原本 topre 的 Slider 就好了，
這篇網誌的作者 Matt3o 還提供了 3D printer 的模型檔，雖然我從來沒有用過 3D printer，恰好可以趁這次機會來試試。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/stl3w.jpg" alt="fornt_page"></p>

<p>由於 Matt3o 表示這個 3D printer 要能成功必須要以 &quot;Frosted Ultra Detail&quot; 的精度來印製，這表示印這麼小的零件及有可能會失敗。
另外我也不相信網路上所吹捧 3D printer 有多方便多容易使用，因此為了避免把錢丟到水裡，就想先以最低成本了方式來試試現今的民用的 3D printer 技術可以做到多細。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/3dOUT.jpg" alt="fornt_page"></p>

<p>很幸運的是隔壁友校交大圖書館有提供 3D printer 試用，並且只需要負擔材料費，並請還可以線上預約，真的是十分理想的平台。清大圖書館蓋這麼大，竟然沒有這種設施真的要學學～
交大圖書館所提供的機器是 da Vinci 1.0 不算是最新，並且採用的3D技術不意外是較平價的 FDM（Fused Deposition Modeling）
白話一點就是把塑膠融化，一層一層把塑膠像牙膏一樣擠上去。由上圖可以看到第一排幾乎完全失敗。這是由於 slider 的模型有懸空的部份，FDM的作法必須要等每一層都凝固才能印下一層，所以懸空的話就會垂下來導致失敗。所以要列印這樣的模型就必須要另外印上支柱，也就是第二排的成品。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/fdm.jpg" alt="fornt_page"></p>

<p>我取一個印的最成功的，並且去掉多出來的支柱，可以及形狀已經很接近原本的模型，但是在表面的處理上，是非常差的，可以看到表面凹凸不平，這樣的印刷品質是完全沒辦法用在零件上，可以想像如果真得換到 HHKB-BT 上面，很有可能根本不能滑動。這裡得到的一個結論就是以 FDM 方式來製作這麼小的零件是不可能的，除非我會還要另外手動加工表面，並且成功率非常低（四分之一），這樣完全和3D列印原本的理念背道而馳，我所認為的3D列印就是只需要一鍵完成，還要另外加工真的是 pain in the ass.</p>

<p>我另外在網路上搜尋精度更高的 3D 列印，發現要更好且容易取的列印方法還有SLA光固化，但是要價不匪，找到最低的價格一批至少要下單 1000 元。
順代一提 FDM 試印只花了 4 元。 不過因為完全沒有用過 SLA 直接就下一批，風險真的有點高＠＠</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/topreMx_color.jpg" alt="fornt_page"></p>

<blockquote>
<p>這就是3D列印最終成品，品質細膩，完全不用另外加工，實在太棒了！3D列印真不虧是第三次工業革命！</p>
</blockquote>

<p>才怪！！！哈哈</p>

<p>這並不是 3D列印的成品，後來還是覺得用 SLA 風險還是太高，那上圖的 slider 是哪裡來的呢？</p>

<p>早在之前在網路上亂逛關於 topre slider 就有發現其實 CoolerMaster 有推出一款 Topre MX hybrid 的鍵盤，
<a href="http://gaming.coolermaster.com/en/products/keyboards/novatouchtkl/">Novatouch TKL</a> 基本上就是 topre 軸加上特製的 slider ，所以網路上有人是直接拆下 Novatouch 的 slider 來用。
不過我原本完全沒有要考慮這樣做，畢竟為了換鍵帽在買一個鍵盤真的太瘋狂了，另外該產品台灣也已經停售了。但是在網路上竟然發現歐洲得 CoolerMaster 官方網站，
竟然有在兜售 slider 的拆裝品。非常幸運的是 CoolerMaster 是台灣公司，所以我就決定賭一睹寫信去 CoolerMaster 詢問有沒有辦法買到多餘的 slider 。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/novatouch.jpg" alt="fornt_page"></p>

<p>第一次詢問的時候，客服就表示已經和 Topre 合作完了，沒有剩下多餘的 slider ， 我原本就要開始找一家光固化比較合理的商家
沒想到，過了一個禮拜多，客服主動連過告訴我，找到一包 slider 問我要不要？並且價格並不貴，所以我當然就敗下來～</p>

<p>這次 3D列印得經驗告訴我 3D列印 要真的走入家庭，還有很長一段之間要走，要取代正常開模鑄造，還早得很，價格和所能提供得品質，
以目前來說只能印個雕像，小道具等，這種精度要求不高的應用，可以看到上圖，MX鍵帽是完全塞不進 FDM 的列印結果。
不過還是希望這個技術可以更加發展，我想那天可以讓金屬列印真的民用化，那就才真的有看頭。</p>

	  ]]></description>
	</item>

	<item>
	  <title>抹茶千層派試作</title>
	  <link>//%E6%8A%B9%E8%8C%B6%E5%8D%83%E5%B1%A4%E6%B4%BE%E8%A9%A6%E4%BD%9C</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-08-11T20:45:17+08:00</pubDate>
	  <guid>//%E6%8A%B9%E8%8C%B6%E5%8D%83%E5%B1%A4%E6%B4%BE%E8%A9%A6%E4%BD%9C</guid>
	  <description><![CDATA[
	     <p>終於有時間可以發一篇關於food的post了，我很喜歡看youtube來學料理，所以這一篇也不例外，由於在嘗試網路上的食譜的時候，往往都會遇到食譜所寫的和實際操作有落差，而這一篇主要是分享我嘗試食譜的過程心得，以及一些改進的想，希望可以幫到那些想要嘗試同一份食譜的人，也因此需要詳細教學以及食譜的可以到<a href="http://www.amandatastes.com/%E3%80%90%E6%9B%BC%E9%A3%9F%E6%85%A2%E8%AF%AD%E3%80%91%E6%8A%B9%E8%8C%B6%E5%8D%83%E5%B1%82%E8%9B%8B%E7%B3%95/">這裡</a></p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">派皮</span> <span class="err">：</span>
  <span class="o">-</span> <span class="n">低筋麵粉</span> <span class="mi">240</span> <span class="n">g</span>
  <span class="o">-</span> <span class="n">雞蛋</span> <span class="mi">4</span> <span class="n">個</span>
  <span class="o">-</span> <span class="n">牛奶</span> <span class="mi">650</span> <span class="n">g</span>
  <span class="o">-</span> <span class="n">奶油</span> <span class="mi">50</span> <span class="n">g</span>
  <span class="o">-</span> <span class="n">抹茶粉</span>
<span class="n">奶油醬</span> <span class="err">：</span>
  <span class="o">-</span> <span class="n">鮮奶油</span> <span class="mi">600</span> <span class="n">ml</span>
  <span class="o">-</span> <span class="n">細砂糖</span> <span class="mi">80</span> <span class="n">g</span>
  <span class="o">-</span> <span class="n">香草精</span>
</code></pre></div>
<p>這次要嘗試做的是有一點小挑戰的抹茶千層派。其實千層派說穿了就是多層的可麗餅，所以要製作麵液的材料並不難準備，食譜當中比較麻煩的應該是抹茶粉。在市面上很多買到的抹茶粉都是用綠茶粉混造，或是加一些有的沒有的添加物，更慘的是只有綠色色素。要分辨出真正的抹茶粉其實看產地就知道了，真正的抹茶的產地在日本，所以如果產地是日本以外的地方基本上有 87% 都不是真正的抹茶。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_2.jpg" alt="fornt_page"></p>

<p>我到處找了很久，最後在微風的外國超市買到了無糖的抹茶粉，必須注意的是有添加物的抹茶粉價差和純抹茶粉差很多，再購買的時候要特別注意。這樣小小一包就要NTD$220，平均起來一克要5.5元，不過為了道地的抹茶味，我還是戳瞎眼跟他買下去。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_3.jpg" alt="fornt_page"></p>

<p>按照食譜的步驟應該可以很輕易得到製作派皮的麵液，這裡要注意的是不要一次把牛奶加下去，要分批加入，而我就是犯了這個錯誤，不過其實也很容易補救，在濾麵液的過程當中，會看到濾網是會卡很多沒有融掉的麵粉，這時只要從底下撈一些麵液上來，在裡面攪和一下就可以補救沒溶掉的麵液。再來就是一定要放到冰箱裏面冷卻，這樣除了讓麵液的氣泡出來，另外也是讓麵液變稠。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_4.jpg" alt="fornt_page"></p>

<p>再來就是整個製作過程最困難的部分-煎派皮。首先你需要一個大小適當不沾平底鍋，我這裡用的是28公分左右的不沾鍋。火侯用最小的文火，小小一圈的那種，這樣鍋底的溫度才會平均。煎派皮得過程就是 1)加麵液 2)翻到背面煎 3)移到旁邊冷卻。其中最關鍵的是一開始麵液多寡的拿捏，只需要一杓就夠了，加太多不僅翻不過來，最後就會變成鬆餅。再來是下麵液的手法，由於麵液一接觸鍋底就會開始凝固，所以一開始從中心加一瓢，這裡注意不要想用撥棒來把麵液撥均勻，由於這時候麵體還沒完全凝固，隨便亂督的話只會弄出一個洞。所以最理想的發法是搖晃鍋身，來讓麵液平均分布在鍋底。這樣也會讓邊緣比較薄內心較厚，這使得再翻面的時候有較堅固施力點。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_5.jpg" alt="fornt_page"></p>

<p>當下麵以後，發現麵身邊緣已成微脆，就可以翻面，注意再翻面的時候，兩隻手抓兩個施力點，一次完成翻面，基本上用鍋鏟是很難成功的，用雙手比較容易。不過要注意靠鍋面的部份會有很燙的水蒸氣，所以怕燙的話戴上手套，會比較理想。以上步驟一開始一定做不好，多試幾次就可以抓出訣竅。通常大約做出18層就可以有一定的高度了，當然你可以自己決定要幾層。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_6.jpg" alt="fornt_page"></p>

<p>再來是製作最簡單鮮奶油醬，之前在網路上看，發現大家都說鮮奶油很難打發，但其實真正的問題不再於要打得多快，而是鮮奶油不夠冰。所以除了一開始就要先冰好鮮奶油，在打的時候不妨用雙層鐵鍋，外層加入冰塊和水，這樣就可以有效冷卻鮮奶油。不過注意邊打邊要注意稠度，打過頭的話就會變成奶油。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_7.jpg" alt="fornt_page"></p>

<p>有了麵皮和鮮奶油，剩下的工作就十分簡單，只需要一層麵皮一層奶油疊上去，這裡注意不要吝嗇奶油，不然會千層派會太乾。疊完以後用盤子壓一下定型，然後放到冰箱冷藏至少三小時，完成冷卻的上，那出來撒上抹茶粉就完成了。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_8.jpg" alt="fornt_page"></p>

<p>找一把夠銳利的刀子，注意不要碰到抹茶粉，這樣就可以切出一塊漂亮的切面。</p>

<p><img src="http://ChingTsai.github.io/chingtsai.github.io//assets/images/cover_cake_1.jpg" alt="fornt_page"></p>

<p>這次得嘗試蠻滿意的，只要能克服派皮的製作，其他都很容易達成，唯一缺憾的是奶油可以在甜一點，派皮可以在薄一點。另外翻餅皮可以用盤子蓋在上面翻過來，就很容易成功，不過我的不沾鍋沒有柄，所以不能用這個小技巧。</p>

	  ]]></description>
	</item>

	<item>
	  <title>CentOS-網管小筆記 : CPU Frequency Hack</title>
	  <link>//CentOS%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-CPU-Frequency-Hack</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-22T10:30:41+08:00</pubDate>
	  <guid>//CentOS%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-CPU-Frequency-Hack</guid>
	  <description><![CDATA[
	     <p>基於之前比賽的需求，所以 survey 過 Linux 底下如何 ad-hoc 動態調整 CPU 頻率。在普通 consumer 硬體架構下，超頻降頻早已不是什麼稀奇的事情，不過在伺服器上並且在 Linux 下作這件事情就不是這麼常見。主要原因伺服器在設計上本來就是以穩定為主，如果你需要更高的頻率，你應該是要更換高頻率的CPU。這也為什麼 Intel Server class 的 CPU 會有這麼多型號。並且伺服器設計上就是必須要以最高效能的方式運作，不過在一些特殊的情況來說，有時候最高頻率的並不是最 efficiency 使用電源。闢如你有大量的 CPU core 作 Multi Agent simulation，可想像的是 Cores 大部分的時間都在 exchange 資訊，而不是作 Compute ， 所以提高頻率所增高的效率，並不有效。其實 OS 本身就已經自動調整頻率的功能，但這對於我來說並不足夠，因為調整等於是 unpredictable 是個 black box。由於當時比賽需要很精準的控制電量，並且確保所有程式都可在最有效的情況輸出，就需要有能手動控制頻率的技術。</p>

<ul>
<li>以下教學並不會為損壞你的設備負責，請確認自己了解以下指令的風險在繼續。</li>
<li>以下這些指令都是 Linux 內建的，不過你會需要 root 權限。</li>
<li>以下教學只適用於 Intel CPU</li>
</ul>

<h4>Know Your Equipment</h4>

<p>首先必須了解自己的 CPU 型號，可以用下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cat</span> <span class="o">/</span><span class="n">proc</span><span class="o">/</span><span class="n">cpuinfo</span> <span class="o">|</span> <span class="n">grep</span> <span class="s">&#39;model name&#39;</span> <span class="o">-</span><span class="n">m</span> <span class="mi">1</span>
  <span class="n">model</span> <span class="n">name</span>    <span class="p">:</span> <span class="n">Intel</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">Xeon</span><span class="p">(</span><span class="n">R</span><span class="p">)</span> <span class="n">CPU</span> <span class="n">E5</span><span class="o">-</span><span class="mi">2690</span> <span class="n">v3</span> <span class="err">@</span> <span class="mf">2.60</span><span class="n">GHz</span>
</code></pre></div>
<p>適用於以下的指令的最少會需要 v1 以後的CPU ，也就是 <code>Sandy Bridge-EP</code> 以後的。</p>

<h4>ACPI modules</h4>

<p>再來我們要打入 ACPI 的 Kernel Modules，ACPI (Advanced Configuration and Power Interface) 提供Kernel 可以更 fine-grain 控制硬體電源，以及更精準的讀數。</p>
<div class="highlight"><pre><code class="language-perl" data-lang="perl"><span class="o">&gt;</span> <span class="n">sudo</span> <span class="n">modprobe</span> <span class="n">acpi</span><span class="o">-</span><span class="n">cpufreq</span>
</code></pre></div>
<p>若有以下資訊，有可能已經載入相對應的 Modules 。
```perl</p>

<blockquote>
<p>modprobe: ERROR: could not insert &#39;acpi_cpufreq&#39;: Device or resource busy
```</p>
</blockquote>

<h4>CPU Frequency Control</h4>

<p>再來我們可以了解我們可以用的頻率有哪些</p>

<p>先到以下位址</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cd</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span>
<span class="o">&gt;</span> <span class="n">ls</span>
  <span class="n">cpu0</span> <span class="n">cpu12</span> <span class="n">cpu16</span> <span class="n">cpu2</span> <span class="n">cpu23</span> <span class="n">cpu27</span> <span class="n">cpu30</span> <span class="n">cpu34</span> <span class="n">cpu38</span> <span class="n">cpu41</span> <span class="n">cpu45</span> <span class="n">cpu6</span> <span class="n">cpuidle</span> <span class="n">modalias</span> <span class="n">power</span> <span class="n">cpu1</span> <span class="n">cpu13</span> <span class="n">cpu17</span> <span class="n">cpu20</span> <span class="n">cpu24</span> <span class="n">cpu28</span> <span class="n">cpu31</span> <span class="n">cpu35</span> <span class="n">cpu39</span> <span class="n">cpu42</span> <span class="n">cpu46</span> <span class="n">cpu7</span> <span class="n">intel_pstate</span> <span class="n">offline</span> <span class="n">present</span> <span class="n">cpu10</span> <span class="n">cpu14</span> <span class="n">cpu18</span> <span class="n">cpu21</span> <span class="n">cpu25</span> <span class="n">cpu29</span> <span class="n">cpu32</span> <span class="n">cpu36</span> <span class="n">cpu4</span> <span class="n">cpu43</span> <span class="n">cpu47</span> <span class="n">cpu8</span> <span class="n">kernel_max</span> <span class="n">online</span> <span class="n">uevent</span> <span class="n">cpu11</span> <span class="n">cpu15</span> <span class="n">cpu19</span> <span class="n">cpu22</span> <span class="n">cpu26</span> <span class="n">cpu3</span> <span class="n">cpu33</span>  <span class="n">cpu37</span> <span class="n">cpu40</span> <span class="n">cpu44</span> <span class="n">cpu5</span> <span class="n">cpu9</span> <span class="n">microcode</span> <span class="n">possible</span>
</code></pre></div>
<p>這裡可以看到你可以控制所有的CPU ， 這裡如果你有開啟Hyper-Threading ，可以看到 cpu 數目會變 double ，這裡我們先隨便跳一個cpu。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">cd</span> <span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span>
<span class="o">&gt;</span> <span class="n">ls</span>
  <span class="n">affected_cpus</span> <span class="n">cpuinfo_max_freq</span> <span class="n">cpuinfo_transition_latency</span> <span class="n">scaling_available_governors</span> <span class="n">scaling_governor</span> <span class="n">scaling_min_freq</span> <span class="n">cpuinfo_cur_freq</span>  <span class="n">cpuinfo_min_freq</span> <span class="n">related_cpus</span> <span class="n">scaling_driver</span> <span class="n">scaling_max_freq</span> <span class="n">scaling_setspeed</span>
</code></pre></div>
<p>幾個東西可查看</p>

<ul>
<li><code>cpuinfo_min_freq</code> : CPU 可以調整的最低頻率</li>
<li><code>cpuinfo_max_freq</code> : CPU 可以調整的最高頻率</li>
</ul>

<p>幾個比較重要的東西可以調</p>

<ul>
<li><code>scaling_min_freq</code> : CPU 運作下的最低頻率</li>
<li><code>scaling_max_freq</code> : CPU 運作下的最高頻率</li>
</ul>

<p>所以你可以藉由調整的上述兩個 upper bound 和 lower bound ，來設定 CPU 頻率的運作時候的範圍調法如下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">echo</span> <span class="p">{</span><span class="err">欲調整的頻率</span><span class="p">}</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_min_freq</span>
<span class="n">example</span> <span class="p">:</span>
<span class="o">&gt;</span> <span class="n">echo</span> <span class="mi">2000000</span> <span class="o">&gt;</span> <span class="o">/</span><span class="n">sys</span><span class="o">/</span><span class="n">devices</span><span class="o">/</span><span class="n">system</span><span class="o">/</span><span class="n">cpu</span><span class="o">/</span><span class="n">cpu0</span><span class="o">/</span><span class="n">cpufreq</span><span class="o">/</span><span class="n">scaling_min_freq</span>
</code></pre></div>
<p>輸完後可以再 <code>cat</code> 一次來確認修改完成。</p>

	  ]]></description>
	</item>

	<item>
	  <title>CentOS 網管小筆記 : 凍結帳號及強制登出</title>
	  <link>//CentOS-%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-%E5%87%8D%E7%B5%90%E5%B8%B3%E8%99%9F%E5%8F%8A%E5%BC%B7%E5%88%B6%E7%99%BB%E5%87%BA</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-11T16:09:36+08:00</pubDate>
	  <guid>//CentOS-%E7%B6%B2%E7%AE%A1%E5%B0%8F%E7%AD%86%E8%A8%98-%E5%87%8D%E7%B5%90%E5%B8%B3%E8%99%9F%E5%8F%8A%E5%BC%B7%E5%88%B6%E7%99%BB%E5%87%BA</guid>
	  <description><![CDATA[
	     <p>以前曾經管理一個 8 node 的 cluster 一段時間，而當時有個需求就是再某一段時間要對整個 cluster 作封測，由於當時 cluster 有外借一個帳號給別人，所以就會擔心再封得時候其他人跑進來玩耍，這樣封測的結果就不準了。但是如果直接刪除帳號到時候再開給他，顯得麻煩，於是就 survey 了一下如何凍結帳號，最好是可以凍結後時間到了就會自動解鎖，設定完後就不用煩惱。</p>

<ul>
<li>以下的這些指令都是 Linux 內建的，不過你會需要 root 權限。</li>
</ul>

<h4>管理密碼 &gt; passwd</h4>

<p>沒想到這個建密碼一定會用到的指令還有其他強大功能，我利用管理特定使用者的密碼狀態，來達到管理特定使用者的長好是否有效的效果，另外<code>usermod</code> 也有類似的功能。 </p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#凍結帳號</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">l</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">l</span> <span class="n">ctsai</span>
<span class="c">#解鎖帳號</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">u</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
<span class="c">#檢驗帳號狀態</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">S</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">passwd</span> <span class="o">-</span><span class="n">S</span> <span class="n">SISQUAKE</span>
<span class="c">#凍結的狀態</span>
<span class="n">SISQUAKE</span> <span class="n">LK</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">11</span> <span class="mi">0</span> <span class="mi">99999</span> <span class="mi">7</span> <span class="o">-</span><span class="mi">1</span> <span class="p">(</span><span class="err">密碼已鎖定。</span><span class="p">)</span>
<span class="c">#解鎖的狀態</span>
<span class="n">SISQUAKE</span> <span class="n">PS</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">11</span> <span class="mi">0</span> <span class="mi">99999</span> <span class="mi">7</span> <span class="o">-</span><span class="mi">1</span> <span class="p">(</span><span class="err">密碼已設定，</span><span class="n">SHA512</span> <span class="err">加密法。</span><span class="p">)</span>
</code></pre></div>
<h4>強制退出使用者 &gt; skill</h4>

<p>當你把某個使用者的密碼失效後，系統並不會馬上把該使用者退出，他原本登入的 session 還會繼續 keep 住，並且可以繼續正常執行，如果你真要馬上把該使用者被登出，就可以使用以下指令：</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="p">{</span><span class="n">username</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
</code></pre></div>
<p>這個指令真的十分兇猛，這是由於給的 signal 是 KILL ，即是立即終止，所以不管是這個使用者的 session 或是 process 都會馬上清光光，請小心使用。</p>

<h4>排程解鎖 &gt; at</h4>

<p>有另一個指令 <code>chage</code> 可以限制某個帳號的有效時間 ， 不過如果要做到自動的解鎖的話就沒有現有的指令可以使用，所以這裡就引入一個很實用的排程指令 <code>at</code> ，這裡的排程是特定排程，非例行排程，也就是指定時間執行，不會重複定時執行。</p>

<p>1.首先要開啟 <code>atd</code> 服務(CentOS 6 以下)</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">service</span> <span class="n">atd</span> <span class="n">restart</span>
</code></pre></div>
<p>不想每次重開都開就記得下</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">chkconfig</span> <span class="n">atd</span> <span class="n">on</span>
</code></pre></div>
<p>2.指定時間執行</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">at</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">09</span>
</code></pre></div>
<p>3.下完後會進去 <code>at</code>  的 bash ，可以想像就是到時候要執行的 script ，依序打入要執行的指令
結束時按 <code>ctrl + D</code></p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#example :</span>
<span class="n">at</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span>
<span class="n">at</span><span class="o">&gt;</span> <span class="n">skill</span> <span class="o">-</span><span class="n">KILL</span> <span class="o">-</span><span class="n">u</span> <span class="n">ctsai</span>
<span class="n">at</span><span class="o">&gt;</span>
<span class="n">job</span> <span class="mi">21</span> <span class="n">at</span> <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span>
       <span class="o">^</span> <span class="n">at</span> <span class="n">job</span> <span class="n">ID</span>
</code></pre></div>
<p>4.查詢at job 的bash</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">at</span> <span class="o">-</span><span class="n">c</span> <span class="o">+</span> <span class="p">{</span><span class="n">at</span> <span class="n">job</span> <span class="n">ID</span><span class="p">}</span>
<span class="c">#example :</span>
<span class="n">at</span> <span class="o">-</span><span class="n">c</span> <span class="mi">21</span>
</code></pre></div>
<p>5.查看所有at job 序列</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">atq</span>
<span class="c">#example :</span>
<span class="n">atq</span>
<span class="mi">21</span>  <span class="mi">2015</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">12</span> <span class="mi">16</span><span class="p">:</span><span class="mo">00</span> <span class="n">a</span> <span class="n">root</span>
</code></pre></div>
<h4>Reference</h4>

<p><a href="http://linux.vbird.org/linux_basic/0410accountmanager.php">鳥哥的 Linux 私房菜</a></p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 94 : Binary Tree Inorder Traversal</title>
	  <link>//LeetCode-94-Binary-Tree-Inorder-Traversal</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-11T11:05:43+08:00</pubDate>
	  <guid>//LeetCode-94-Binary-Tree-Inorder-Traversal</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes&#39; values.</p>

<p>For example:
Given binary tree</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"> <span class="mi">1</span>
  \
   <span class="mi">2</span>
  <span class="o">/</span>
 <span class="mi">3</span>
</code></pre></div>
<p>return [1,3,2]</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題如果用 recursive 的話十分簡單，但是如果要用 iterative 作的話就不是這麼容易，最主要的原因是你無法用 call recursive 的順序來決定你 output value 的順序。</p>

<h3>Guide</h3>

<p>首先你需要有一個 Stack 來倒序記錄，由於 Inorder 是 中-&gt;左-&gt;右 ，所以必須有一個方式來記錄走到最左之間的所有 Node 。 所以作法就是每次 iteration 先看 <code>Stack Q</code> 的 top， 如果他有左子孫的話，就把它加上去。所以我們會走到樹的最左邊，並且 <code>Stack Q</code> 到目前為止的 Node 。 此時 top 就沒有左子孫，因為此時是作 Inorder ， 所以這時候我們要先把 top 的 value 輸出 。 並判斷他有沒有右子孫，如果有的話就要加到 <code>Stack Q</code> 上面。 這裡有一個很重要的步驟就是，要能標記哪些 Node 已經輸出，這樣才不會重複輸出， 所以在把 top 的 value 輸出後，除了要 removeFirst，並且把 <code>values</code> 設成 <code>Integer.MIN_VALUE</code> 來標示已經輸出了。如此做到 <code>Stack Q</code> 為空的時候後停止。以下就用跟上面一樣的例子，來看 <code>Stack Q</code> 在整個演算法之中的情況，應該就會比較好理解。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span> <span class="p">]</span>    <span class="p">[</span> <span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="mi">3</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">1</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>
        <span class="mi">1</span>      <span class="mi">2</span>      <span class="mi">2</span>      <span class="mi">3</span>      <span class="mi">4</span>      <span class="mi">5</span>          
</code></pre></div>
<blockquote>
<ol>
<li>put root 1</li>
<li>top node 1 has no left child -&gt; pop and output value, top node 1 has right child -&gt; put right child 2</li>
<li>top node 2 has left child -&gt; put left child 3 and skip the rest</li>
<li>top node 3 has no left child -&gt; pop and output value, top node 3 has no right child then do nothing</li>
<li>top node 2 has no left child -&gt; pop and output value, top node 2 has no right child then do nothing</li>
</ol>
</blockquote>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for a binary tree node.</span>
<span class="cm"> * public class TreeNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     TreeNode left;</span>
<span class="cm"> *     TreeNode right;</span>
<span class="cm"> *     TreeNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<h3>Postorder</h3>

<p>如此掌握 Inorder 的作法後，用類似的模式也可以做到 Postorder。</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">postorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Shell Script : Jekyll Markdown Generator</title>
	  <link>//Shell-Script-Jekyll-Markdown-Generator</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T22:56:00+08:00</pubDate>
	  <guid>//Shell-Script-Jekyll-Markdown-Generator</guid>
	  <description><![CDATA[
	     <p>很多人都問我說為什麼要用 MAC？除了做工精良，續航力高，還有一點非常棒的就是他可以和 Linux 共用大部分的 Unix Script。以下就用一個小小的例子來解釋能寫一些簡單的 Script 可以讓工程師一天過的更愉快。</p>

<p>一開始的緣由在於 Jekyll 的 Markdown 有一個既定的格式，就是檔名要是 <code>日期-標題.md</code> 並且內部要以特定的 tag ，不過如果每次發一篇文章都還要去填寫日期的話，並修改檔名的話，就顯得太費工夫了，所以初始的概念就是能 input <code>title</code> 和 <code>tag</code> ， 然後剩下重複的格式就交由 Script。</p>

<h3>I/O</h3>

<p>所以首先就先做簡單 I/O 來得到 <code>title</code> 和 <code>tag</code> 。</p>

<p>First of all, we should handle some I/O to get the input arguments <code>title</code> and <code>tag</code> .</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">printf</span> <span class="s">&quot;Title : &quot;</span>
<span class="n">read</span> <span class="n">title</span>
<span class="n">printf</span> <span class="s">&quot;Tags : &quot;</span>
<span class="n">read</span> <span class="n">tags</span>
</code></pre></div>
<h3>Parse</h3>

<p>再來由於我們要直接把 <code>title</code> 拿來當做檔名，不過由於其中多少會有一些標點符號，在這裡我們就要先把他們移除。所以我們用 <code>sed</code> 來做取代的動作，由於 <code>sed</code> 支援正規表示，所以我們可以用 <code>[[:punct:]]</code> 來指定標點符號，若之後有延伸的取代動作的話可以參考<a href="https://en.wikipedia.org/wiki/Regular_expression">這裡</a>更多正規表示。</p>

<p>Next, since there will be some punctuations in the title (e.g. .,;/?), we should remove them before we use it as part of the filename later. Here, we are using <code>sed</code> to remove the punctuations. Fortunately, <code>sed</code> support regular expression, so we can use <code>[[:punct:]]</code> to represent the punctuations and remove them. You could find more regular expression <a href="https://en.wikipedia.org/wiki/Regular_expression">here</a> , if we want to do more extensions.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $title | sed -e &quot;s/[[:punct:]]//g&quot;`</span>
</code></pre></div>
<p>最後再把空白都換成一槓。
Also, we do the same handling to the space, but this time we replace it with <code>-</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $parse | sed -e &quot;s/ /-/g&quot;`</span>
</code></pre></div>
<h3>Date</h3>

<p>再來我們要取得 Post 當下的時間，把它加到檔名裡，這裡使用 <code>date</code> 來取得時間並且用內建輸出syntax 。這裡列舉一些簡單的表示方式。</p>

<p>We also need to get the time as the create time when we lunch the script. We use <code>date</code> to get then current time, and since it supports output format , we can simply transform the date to the format we want. Here is a handy lookup table.</p>

<table><thead>
<tr>
<th style="text-align: center">Example</th>
<th style="text-align: center">Format</th>
<th style="text-align: center">Outcome</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">年(year)</td>
<td style="text-align: center">％Y</td>
<td style="text-align: center">2016</td>
</tr>
<tr>
<td style="text-align: center">月(month)</td>
<td style="text-align: center">%m</td>
<td style="text-align: center">03</td>
</tr>
<tr>
<td style="text-align: center">日(day)</td>
<td style="text-align: center">%d</td>
<td style="text-align: center">07</td>
</tr>
<tr>
<td style="text-align: center">時(hour)</td>
<td style="text-align: center">%H</td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td style="text-align: center">分(minute)</td>
<td style="text-align: center">%M</td>
<td style="text-align: center">12</td>
</tr>
<tr>
<td style="text-align: center">秒(second)</td>
<td style="text-align: center">%S</td>
<td style="text-align: center">00</td>
</tr>
</tbody></table>

<p>如此我們可以把現在時間轉成我們要的格式。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># 2016-03-07</span>
<span class="n">create_date</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d&quot;`</span>
<span class="c"># 2016-03-07 22:56:00</span>
<span class="n">create_date_time</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d %H:%M:%S&quot;`</span>
</code></pre></div>
<h3>Demo</h3>

<p>最後展示一下使用的情況</p>

<p>Here is the screenshot.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">sh</span> <span class="n">auto_post</span><span class="o">.</span><span class="n">sh</span>
  <span class="n">Title</span> <span class="p">:</span> <span class="n">Shell</span> <span class="n">Script</span> <span class="p">:</span> <span class="n">Jekyll</span> <span class="n">Markdown</span> <span class="n">Generator</span>
  <span class="n">Tags</span> <span class="p">:</span> <span class="n">code</span>
<span class="o">&gt;</span> <span class="n">ls</span> <span class="n">_posts</span><span class="o">/</span>
  <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
<span class="o">&gt;</span> <span class="n">cat</span> <span class="n">_posts</span><span class="o">/</span><span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
  <span class="o">---</span>
  <span class="n">layout</span> <span class="p">:</span> <span class="n">post</span>
  <span class="n">cover</span><span class="p">:</span> <span class="n">false</span>
  <span class="n">title</span><span class="p">:</span> <span class="s">&#39;Shell Script : Jekyll Markdown Generator&#39;</span>
  <span class="n">date</span><span class="p">:</span> <span class="s">&#39;2016-03-07 22:56:00&#39;</span>
  <span class="n">tags</span><span class="p">:</span> <span class="n">code</span>
  <span class="n">subclass</span><span class="p">:</span> <span class="s">&#39;post tag-code&#39;</span>
  <span class="n">categories</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="n">cover</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="o">---</span>
</code></pre></div>
<h3>Source Code</h3>

<p>由於不同得 template 會有不同 Front Matter ， 所以可以自行視需求多加argument 進去，不過作法是雷同的。可以從<a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">這裡</a>拿到原始碼。</p>

<p>Since different Jekyll template has different Front Matter, feel free to add more arguments in the script to make it compatible to your Jekyll template. You can find the Source code <a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">here</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 147 : Insertion Sort List</title>
	  <link>//LeetCode-147-Insertion-Sort-List</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T14:32:49+08:00</pubDate>
	  <guid>//LeetCode-147-Insertion-Sort-List</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Sort a linked list using insertion sort.</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題很有意思， insertion sort 可能是大家最熟悉的 n^2 sorting ， 原本認為用 array 來作 insert 要花很多時間在做資料搬移，但當做在單向的 LinkedList 卻用變得更棘手。</p>

<h3>Guide</h3>

<p>第一個遇到的問題就是要 maintain 前後兩個 node 的 next 要能指對。所以當有一個直鏈：<code>A-&gt;B-&gt;C</code> 若要用 <code>D</code> 取代  <code>B</code> 我就要確保 <code>A-&gt;D</code> 和 <code>D-&gt;C</code> 。 這個可以用一個暫存的 Object pre 來儲存。第二個問題就是 head 是沒有 parent ， 所以要用一個空的dummy_head 來當作假的 head。 最後就是這題用一個很不像傳統 insertion sort 的解法，也就是分成兩個鏈，一個是 dummy 開頭的 sorted 鏈 ， 一個就是原本 input 進來的鏈。所以每次從 input 鏈抓一個 node <code>cur</code> ， 然後到 sorted 鏈裡找到是適合的地方插進去，這樣的作法會比用同一條鏈還 maintain 兩個鏈來的容易很多。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for singly-linked list.</span>
<span class="cm"> * public class ListNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     ListNode next;</span>
<span class="cm"> *     ListNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">ListNode</span> <span class="n">dummy_head</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">insertionSortList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="n">ListNode</span> <span class="n">pre</span><span class="o">,</span><span class="n">cur</span><span class="o">,</span><span class="n">iter</span><span class="o">;</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">cur</span> <span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">iter</span> <span class="o">=</span> <span class="n">dummy_head</span><span class="o">;</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">val</span><span class="o">){</span>
                <span class="n">iter</span><span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">cur</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">iter</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dummy_head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Jekyll Markdown Syntax Highlighting</title>
	  <link>//Jekyll-Markdown-Syntax-Highlighting</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T13:00:00+08:00</pubDate>
	  <guid>//Jekyll-Markdown-Syntax-Highlighting</guid>
	  <description><![CDATA[
	     <p>當初會被吸引來用 Jekyll 還來搭建這個 Blog ，其中一個很大的原因，也是因為內建的 Markdown expression 可以很方便的幫一些範例 Code 做美美的 Syntax Highlighting。不過 Highlighting 的 style 通常都被 Template 寫死在 css 裡。所以當我在用這個 Template 我就很樣把預設的 style 換掉，所以在做了一下 Serve 找到了修改的方法。</p>

<h3>Pygments</h3>

<p>首先 Jekyll 得標色其實是用一個 python 的 Syntax highlighter <a href="http://pygments.org/">Pygments</a> 所 gen 出來的，Pygments 其實非常強大，支援100多種語言並且輸出成各式各樣的格式，這裡我們是使用 <code>html</code>。 所以首先我們要先下載做新版本的 <a href="http://pygments.org/">Pygments</a> ， 並用 python 安裝。</p>

<p>The Syntax Highlighting style is actually extracted form a generic syntax highlighter written in python called <a href="http://pygments.org/">Pygments</a>. Pygments supports 300 languages and other text formats. For here, we are using the  <code>html</code> style. First of all, download the latest version of <a href="http://pygments.org/">Pygments</a>, and install it with python.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">tar</span> <span class="n">xf</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mf">3.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
<span class="n">cd</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mi">3</span>
<span class="n">sudo</span> <span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</code></pre></div>
<h3>Configuration</h3>

<p>再來確認你的 <code>_config.yml</code> 當中的 <code>highlighter</code> 設為 <code>pygments</code></p>

<p>Make sure you set <code>highlighter</code> into <code>pygments</code> in your <code>_config.yml</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># Jykell configuration</span>
<span class="n">markdown</span><span class="p">:</span> <span class="n">redcarpet</span>
<span class="n">highlighter</span><span class="p">:</span> <span class="n">pygments</span>
<span class="o">...</span>
</code></pre></div>
<p>把你的路徑移到 Template 的 css 資料夾下 ， 以我的 Template 是在 <code>/assets/css</code> 你可以看到會有一個 <code>syntax.css</code> ，這個就是用來標色的 style 。</p>

<p>Change you directory to the css folder in your Template. In my case, it is located at <code>/assets/css</code>. You should find a <code>syntax.css</code> which denotes the syntax highlighting.</p>

<h3>Select Highlight Style</h3>

<p>此時你可以到 <a href="http://pygments.org/demo/3913075/">Pygments官網</a> 去選擇你喜歡的 style ， 這裡我使用 <code>monokai</code> 這個 style 。 最後下以下指令，把新的 syntax 套色導到 <code>syntax.css</code>。</p>

<p>At this point, you can pick your favorite color highlighting style <a href="http://pygments.org/demo/3913075/">here</a>. I am using style  <code>monokai</code> in this demonstration. Finally, enter the scripts below to replace the  <code>syntax.css</code>。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pygmentize</span> <span class="o">-</span><span class="n">S</span> <span class="n">monokai</span> <span class="o">-</span><span class="n">f</span> <span class="n">html</span> <span class="o">&gt;</span> <span class="n">syntax</span><span class="o">.</span><span class="n">css</span>
</code></pre></div>
<h3>Background Color</h3>

<p>最後要注意的是，code block 底色的 css 並不是寫在 <code>syntax.css</code> 裡面，所以如果你是從白底套色改成黑底套色， 可能就會發現字都變不見了，所以只要手動修改 code block 底色就可以了，通常都是 <code>pre</code> 這個 class 的 <code>background-color</code> ， 以我的 Template 就在 <code>screen.css</code> 裡面。</p>

<p>Last but not least, if you change the style from a white background-color theme to a background-color theme, you will notice that the words are disappeared. This is because that the code block background-color is not denoted in the <code>syntax.css</code>. You should change it manually. It is usually denoted in  <code>pre</code>  css class. So I simply change the <code>pre</code> class <code>background-color</code> in <code>screen.css</code>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 46 : Permutations</title>
	  <link>//LeetCode-46-Permutations</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T10:18:00+08:00</pubDate>
	  <guid>//LeetCode-46-Permutations</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</p>
</blockquote>

<h3>Initial Though</h3>

<p>基本上的概念就是對一個 input integer array 做隨機排序，使個 Backtracking 的經典題目。</p>

<h3>Guide</h3>

<p>這裡可以想像就是在對一個 N-ary Tree 用 DFS 來遍歷， 而 N 就是總共所有的 integer array。所以可以想像每下一層就是要從剩下的數字中挑一個放到 <code>sub</code>，所以這裡我用一個 <code>HashSet</code> 來記錄已經取出的數字。如此做到所有的數字都被拿完，也就是 <code>sub</code> 和 input array 一樣長，此時就把 <code>sub</code> clone 一份到 <code>result</code> 裡。並且回傳的時候要把自己放到 <code>sub</code> 尾端的數字 pop 掉，另外也要移除 <code>HashSet</code> 裡的同一個數字。這樣從底部回去的時候，之前選的字才能被之後 sub array 選到。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span> <span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">,</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span><span class="o">){</span>

        <span class="k">if</span><span class="o">(</span><span class="n">k</span><span class="o">==</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span><span class="n">sub</span><span class="o">.</span><span class="na">clone</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">h</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                <span class="n">sub</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">h</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sub</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
                <span class="n">h</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>


</channel>
</rss>
