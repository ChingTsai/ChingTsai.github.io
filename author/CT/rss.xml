<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>ChingTsai.github.io/chingtsai.github.io/</title>
   
   <link>http://ChingTsai.github.io/chingtsai.github.io/</link>
   <description>Code, Food, Photo and some Geek stuff ...</description>
   <language>en-uk</language>
   <managingEditor> Ching Tsai</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>LeetCode 94 : Binary Tree Inorder Traversal</title>
	  <link>//LeetCode-94-Binary-Tree-Inorder-Traversal</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-11T11:05:43+08:00</pubDate>
	  <guid>//LeetCode-94-Binary-Tree-Inorder-Traversal</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a binary tree, return the inorder traversal of its nodes&#39; values.</p>

<p>For example:
Given binary tree</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"> <span class="mi">1</span>
  \
   <span class="mi">2</span>
  <span class="o">/</span>
 <span class="mi">3</span>
</code></pre></div>
<p>return [1,3,2]</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題如果用 recursive 的話十分簡單，但是如果要用 iterative 作的話就不是這麼容易，最主要的原因是你無法用 call recursive 的順序來決定你 output value 的順序。</p>

<h3>Guide</h3>

<p>首先你需要有一個 Stack 來倒序記錄，由於 Inorder 是 中-&gt;左-&gt;右 ，所以必須有一個方式來記錄走到最左之間的所有 Node 。 所以作法就是每次 iteration 先看 <code>Stack Q</code> 的 top， 如果他有左子孫的話，就把它加上去。所以我們會走到樹的最左邊，並且 <code>Stack Q</code> 到目前為止的 Node 。 此時 top 就沒有左子孫，因為此時是作 Inorder ， 所以這時候我們要先把 top 的 value 輸出 。 並判斷他有沒有右子孫，如果有的話就要加到 <code>Stack Q</code> 上面。 這裡有一個很重要的步驟就是，要能標記哪些 Node 已經輸出，這樣才不會重複輸出， 所以在把 top 的 value 輸出後，除了要 removeFirst，並且把 <code>values</code> 設成 <code>Integer.MIN_VALUE</code> 來標示已經輸出了。如此做到 <code>Stack Q</code> 為空的時候輸出。以下就用跟上面一樣的例子，來看 <code>Stack Q</code> 在整個演算法之中的情況，應該就會比較好理解。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span> <span class="p">]</span>    <span class="p">[</span> <span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>    <span class="p">[</span><span class="mi">1</span><span class="p">]</span>   <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">]</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">]</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span><span class="mi">3</span><span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span> <span class="o">-&gt;</span> <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">1</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span><span class="mi">2</span><span class="o">|</span>    <span class="o">|</span> <span class="o">|</span>
<span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>    <span class="o">|</span><span class="n">_</span><span class="o">|</span>
        <span class="mi">1</span>      <span class="mi">2</span>      <span class="mi">2</span>      <span class="mi">3</span>      <span class="mi">4</span>      <span class="mi">5</span>          
</code></pre></div>
<blockquote>
<ol>
<li>put root 1</li>
<li>top node 1 has no left child -&gt; pop and output value, top node 1 has right child -&gt; put right child 2</li>
<li>top node 2 has left child -&gt; put left child 3 and skip the rest</li>
<li>top node 3 has no left child -&gt; pop and output value, top node 3 has no right child then do nothing</li>
<li>top node 2 has no left child -&gt; pop and output value, top node 2 has no right child then do nothing</li>
</ol>
</blockquote>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for a binary tree node.</span>
<span class="cm"> * public class TreeNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     TreeNode left;</span>
<span class="cm"> *     TreeNode right;</span>
<span class="cm"> *     TreeNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">inorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
<h3>Postorder</h3>

<p>如此掌握 Inorder 的作法後，用類似的模式也可以做到 Postorder。</p>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="nf">postorderTraversal</span><span class="o">(</span><span class="n">TreeNode</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;</span> <span class="n">Q</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">TreeNode</span><span class="o">&gt;();</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="k">if</span><span class="o">(</span><span class="n">root</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span>
            <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">root</span><span class="o">);</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">Q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
           <span class="n">TreeNode</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">.</span><span class="na">val</span> <span class="o">!=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">){</span>
                    <span class="n">Q</span><span class="o">.</span><span class="na">addFirst</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">TreeNode</span> <span class="n">output</span> <span class="o">=</span> <span class="n">Q</span><span class="o">.</span><span class="na">removeFirst</span><span class="o">();</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">output</span><span class="o">.</span><span class="na">val</span><span class="o">);</span>
            <span class="n">output</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">MIN_VALUE</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Shell Script : Jekyll Markdown Generator</title>
	  <link>//Shell-Script-Jekyll-Markdown-Generator</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T22:56:00+08:00</pubDate>
	  <guid>//Shell-Script-Jekyll-Markdown-Generator</guid>
	  <description><![CDATA[
	     <p>很多人都問我說為什麼要用 MAC？除了做工精良，續航力高，還有一點非常棒的就是他可以和 Linux 共用大部分的 Unix Script。以下就用一個小小的例子來解釋能寫一些簡單的 Script 可以讓工程師一天過的更愉快。</p>

<p>一開始的緣由在於 Jekyll 的 Markdown 有一個既定的格式，就是檔名要是 <code>日期-標題.md</code> 並且內部要以特定的 tag ，不過如果每次發一篇文章都還要去填寫日期的話，並修改檔名的話，就顯得太費工夫了，所以初始的概念就是能 input <code>title</code> 和 <code>tag</code> ， 然後剩下重複的格式就交由 Script。</p>

<h3>I/O</h3>

<p>所以首先就先做簡單 I/O 來得到 <code>title</code> 和 <code>tag</code> 。</p>

<p>First of all, we should handle some I/O to get the input arguments <code>title</code> and <code>tag</code> .</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">printf</span> <span class="s">&quot;Title : &quot;</span>
<span class="n">read</span> <span class="n">title</span>
<span class="n">printf</span> <span class="s">&quot;Tags : &quot;</span>
<span class="n">read</span> <span class="n">tags</span>
</code></pre></div>
<h3>Parse</h3>

<p>再來由於我們要直接把 <code>title</code> 拿來當做檔名，不過由於其中多少會有一些標點符號，在這裡我們就要先把他們移除。所以我們用 <code>sed</code> 來做取代的動作，由於 <code>sed</code> 支援正規表示，所以我們可以用 <code>[[:punct:]]</code> 來指定標點符號，若之後有延伸的取代動作的話可以參考<a href="https://en.wikipedia.org/wiki/Regular_expression">這裡</a>更多正規表示。</p>

<p>Next, since there will be some punctuations in the title (e.g. .,;/?), we should remove them before we use it as part of the filename later. Here, we are using <code>sed</code> to remove the punctuations. Fortunately, <code>sed</code> support regular expression, so we can use <code>[[:punct:]]</code> to represent the punctuations and remove them. You could find more regular expression <a href="https://en.wikipedia.org/wiki/Regular_expression">here</a> , if we want to do more extensions.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $title | sed -e &quot;s/[[:punct:]]//g&quot;`</span>
</code></pre></div>
<p>最後再把空白都換成一槓。
Also, we do the same handling to the space, but this time we replace it with <code>-</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">parse</span><span class="o">=</span><span class="sb">`echo $parse | sed -e &quot;s/ /-/g&quot;`</span>
</code></pre></div>
<h3>Date</h3>

<p>再來我們要取得 Post 當下的時間，把它加到檔名裡，這裡使用 <code>date</code> 來取得時間並且用內建輸出syntax 。這裡列舉一些簡單的表示方式。</p>

<p>We also need to get the time as the create time when we lunch the script. We use <code>date</code> to get then current time, and since it supports output format , we can simply transform the date to the format we want. Here is a handy lookup table.</p>

<table><thead>
<tr>
<th style="text-align: center">Example</th>
<th style="text-align: center">Format</th>
<th style="text-align: center">Outcome</th>
</tr>
</thead><tbody>
<tr>
<td style="text-align: center">年(year)</td>
<td style="text-align: center">％Y</td>
<td style="text-align: center">2016</td>
</tr>
<tr>
<td style="text-align: center">月(month)</td>
<td style="text-align: center">%m</td>
<td style="text-align: center">03</td>
</tr>
<tr>
<td style="text-align: center">日(day)</td>
<td style="text-align: center">%d</td>
<td style="text-align: center">07</td>
</tr>
<tr>
<td style="text-align: center">時(hour)</td>
<td style="text-align: center">%H</td>
<td style="text-align: center">16</td>
</tr>
<tr>
<td style="text-align: center">分(minute)</td>
<td style="text-align: center">%M</td>
<td style="text-align: center">12</td>
</tr>
<tr>
<td style="text-align: center">秒(second)</td>
<td style="text-align: center">%S</td>
<td style="text-align: center">00</td>
</tr>
</tbody></table>

<p>如此我們可以把現在時間轉成我們要的格式。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># 2016-03-07</span>
<span class="n">create_date</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d&quot;`</span>
<span class="c"># 2016-03-07 22:56:00</span>
<span class="n">create_date_time</span><span class="o">=</span><span class="sb">`date +&quot;%Y-%m-%d %H:%M:%S&quot;`</span>
</code></pre></div>
<h3>Demo</h3>

<p>最後展示一下使用的情況</p>

<p>Here is the screenshot.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&gt;</span> <span class="n">sh</span> <span class="n">auto_post</span><span class="o">.</span><span class="n">sh</span>
  <span class="n">Title</span> <span class="p">:</span> <span class="n">Shell</span> <span class="n">Script</span> <span class="p">:</span> <span class="n">Jekyll</span> <span class="n">Markdown</span> <span class="n">Generator</span>
  <span class="n">Tags</span> <span class="p">:</span> <span class="n">code</span>
<span class="o">&gt;</span> <span class="n">ls</span> <span class="n">_posts</span><span class="o">/</span>
  <span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
<span class="o">&gt;</span> <span class="n">cat</span> <span class="n">_posts</span><span class="o">/</span><span class="mi">2016</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mo">07</span><span class="o">-</span><span class="n">Shell</span><span class="o">-</span><span class="n">Script</span><span class="o">-</span><span class="n">Jekyll</span><span class="o">-</span><span class="n">Markdown</span><span class="o">-</span><span class="n">Generator</span><span class="o">.</span><span class="n">md</span>
  <span class="o">---</span>
  <span class="n">layout</span> <span class="p">:</span> <span class="n">post</span>
  <span class="n">cover</span><span class="p">:</span> <span class="n">false</span>
  <span class="n">title</span><span class="p">:</span> <span class="s">&#39;Shell Script : Jekyll Markdown Generator&#39;</span>
  <span class="n">date</span><span class="p">:</span> <span class="s">&#39;2016-03-07 22:56:00&#39;</span>
  <span class="n">tags</span><span class="p">:</span> <span class="n">code</span>
  <span class="n">subclass</span><span class="p">:</span> <span class="s">&#39;post tag-code&#39;</span>
  <span class="n">categories</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="n">cover</span><span class="p">:</span> <span class="s">&#39;&#39;</span>
  <span class="o">---</span>
</code></pre></div>
<h3>Source Code</h3>

<p>由於不同得 template 會有不同 Front Matter ， 所以可以自行視需求多加argument 進去，不過作法是雷同的。可以從<a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">這裡</a>拿到原始碼。</p>

<p>Since different Jekyll template has different Front Matter, feel free to add more arguments in the script to make it compatible to your Jekyll template. You can find the Source code <a href="https://github.com/ChingTsai/Jekyll-Markdown-Generator">here</a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 147 : Insertion Sort List</title>
	  <link>//LeetCode-147-Insertion-Sort-List</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T14:32:49+08:00</pubDate>
	  <guid>//LeetCode-147-Insertion-Sort-List</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Sort a linked list using insertion sort.</p>
</blockquote>

<h3>Initial Though</h3>

<p>這題很有意思， insertion sort 可能是大家最熟悉的 n^2 sorting ， 原本認為用 array 來作 insert 要花很多時間在做資料搬移，但當做在單向的 LinkedList 卻用變得更棘手。</p>

<h3>Guide</h3>

<p>第一個遇到的問題就是要 maintain 前後兩個 node 的 next 要能指對。所以當有一個直鏈：<code>A-&gt;B-&gt;C</code> 若要用 <code>D</code> 取代  <code>B</code> 我就要確保 <code>A-&gt;D</code> 和 <code>D-&gt;C</code> 。 這個可以用一個暫存的 Object pre 來儲存。第二個問題就是 head 是沒有 parent ， 所以要用一個空的dummy_head 來當作假的 head。 最後就是這題用一個很不像傳統 insertion sort 的解法，也就是分成兩個鏈，一個是 dummy 開頭的 sorted 鏈 ， 一個就是原本 input 進來的鏈。所以每次從 input 鏈抓一個 node <code>cur</code> ， 然後到 sorted 鏈裡找到是適合的地方插進去，這樣的作法會比用同一條鏈還 maintain 兩個鏈來的容易很多。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="cm">/**</span>
<span class="cm"> * Definition for singly-linked list.</span>
<span class="cm"> * public class ListNode {</span>
<span class="cm"> *     int val;</span>
<span class="cm"> *     ListNode next;</span>
<span class="cm"> *     ListNode(int x) { val = x; }</span>
<span class="cm"> * }</span>
<span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="n">ListNode</span> <span class="n">dummy_head</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="kd">public</span> <span class="n">ListNode</span> <span class="nf">insertionSortList</span><span class="o">(</span><span class="n">ListNode</span> <span class="n">head</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">head</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">head</span><span class="o">;</span>
        <span class="n">ListNode</span> <span class="n">pre</span><span class="o">,</span><span class="n">cur</span><span class="o">,</span><span class="n">iter</span><span class="o">;</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">head</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">cur</span> <span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">iter</span> <span class="o">=</span> <span class="n">dummy_head</span><span class="o">;</span>
            <span class="k">while</span><span class="o">(</span><span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">.</span><span class="na">val</span> <span class="o">&lt;</span> <span class="n">cur</span><span class="o">.</span><span class="na">val</span><span class="o">){</span>
                <span class="n">iter</span><span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="n">pre</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">cur</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">iter</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
            <span class="n">iter</span><span class="o">.</span><span class="na">next</span> <span class="o">=</span> <span class="n">cur</span><span class="o">;</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">pre</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">dummy_head</span><span class="o">.</span><span class="na">next</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Jekyll Markdown Syntax Highlighting</title>
	  <link>//Jekyll-Markdown-Syntax-Highlighting</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T13:00:00+08:00</pubDate>
	  <guid>//Jekyll-Markdown-Syntax-Highlighting</guid>
	  <description><![CDATA[
	     <p>當初會被吸引來用 Jekyll 還來搭建這個 Blog ，其中一個很大的原因，也是因為內建的 Markdown expression 可以很方便的幫一些範例 Code 做美美的 Syntax Highlighting。不過 Highlighting 的 style 通常都被 Template 寫死在 css 裡。所以當我在用這個 Template 我就很樣把預設的 style 換掉，所以在做了一下 Serve 找到了修改的方法。</p>

<h3>Pygments</h3>

<p>首先 Jekyll 得標色其實是用一個 python 的 Syntax highlighter <a href="http://pygments.org/">Pygments</a> 所 gen 出來的，Pygments 其實非常強大，支援100多種語言並且輸出成各式各樣的格式，這裡我們是使用 <code>html</code>。 所以首先我們要先下載做新版本的 <a href="http://pygments.org/">Pygments</a> ， 並用 python 安裝。</p>

<p>The Syntax Highlighting style is actually extracted form a generic syntax highlighter written in python called <a href="http://pygments.org/">Pygments</a>. Pygments supports 300 languages and other text formats. For here, we are using the  <code>html</code> style. First of all, download the latest version of <a href="http://pygments.org/">Pygments</a>, and install it with python.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">tar</span> <span class="n">xf</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mf">3.</span><span class="n">tar</span><span class="o">.</span><span class="n">gz</span>
<span class="n">cd</span> <span class="n">Pygments</span><span class="o">-</span><span class="mf">2.1</span><span class="o">.</span><span class="mi">3</span>
<span class="n">sudo</span> <span class="n">python</span> <span class="n">setup</span><span class="o">.</span><span class="n">py</span> <span class="n">install</span>
</code></pre></div>
<h3>Configuration</h3>

<p>再來確認你的 <code>_config.yml</code> 當中的 <code>highlighter</code> 設為 <code>pygments</code></p>

<p>Make sure you set <code>highlighter</code> into <code>pygments</code> in your <code>_config.yml</code>.</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c"># Jykell configuration</span>
<span class="n">markdown</span><span class="p">:</span> <span class="n">redcarpet</span>
<span class="n">highlighter</span><span class="p">:</span> <span class="n">pygments</span>
<span class="o">...</span>
</code></pre></div>
<p>把你的路徑移到 Template 的 css 資料夾下 ， 以我的 Template 是在 <code>/assets/css</code> 你可以看到會有一個 <code>syntax.css</code> ，這個就是用來標色的 style 。</p>

<p>Change you directory to the css folder in your Template. In my case, it is located at <code>/assets/css</code>. You should find a <code>syntax.css</code> which denotes the syntax highlighting.</p>

<h3>Select Highlight Style</h3>

<p>此時你可以到 <a href="http://pygments.org/demo/3913075/">Pygments官網</a> 去選擇你喜歡的 style ， 這裡我使用 <code>monokai</code> 這個 style 。 最後下以下指令，把新的 syntax 套色導到 <code>syntax.css</code>。</p>

<p>At this point, you can pick your favorite color highlighting style <a href="http://pygments.org/demo/3913075/">here</a>. I am using style  <code>monokai</code> in this demonstration. Finally, enter the scripts below to replace the  <code>syntax.css</code>。</p>
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">pygmentize</span> <span class="o">-</span><span class="n">S</span> <span class="n">monokai</span> <span class="o">-</span><span class="n">f</span> <span class="n">html</span> <span class="o">&gt;</span> <span class="n">syntax</span><span class="o">.</span><span class="n">css</span>
</code></pre></div>
<h3>Background Color</h3>

<p>最後要注意的是，code block 底色的 css 並不是寫在 <code>syntax.css</code> 裡面，所以如果你是從白底套色改成黑底套色， 可能就會發現字都變不見了，所以只要手動修改 code block 底色就可以了，通常都是 <code>pre</code> 這個 class 的 <code>background-color</code> ， 以我的 Template 就在 <code>screen.css</code> 裡面。</p>

<p>Last but not least, if you change the style from a white background-color theme to a background-color theme, you will notice that the words are disappeared. This is because that the code block background-color is not denoted in the <code>syntax.css</code>. You should change it manually. It is usually denoted in  <code>pre</code>  css class. So I simply change the <code>pre</code> class <code>background-color</code> in <code>screen.css</code>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>LeetCode 46 : Permutations</title>
	  <link>//LeetCode-46-Permutations</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-07T10:18:00+08:00</pubDate>
	  <guid>//LeetCode-46-Permutations</guid>
	  <description><![CDATA[
	     <blockquote>
<p>Given a collection of distinct numbers, return all possible permutations.
For example,
[1,2,3] have the following permutations:
[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].</p>
</blockquote>

<h3>Initial Though</h3>

<p>基本上的概念就是對一個 input integer array 做隨機排序，使個 Backtracking 的經典題目。</p>

<h3>Guide</h3>

<p>這裡可以想像就是在對一個 N-ary Tree 用 DFS 來遍歷， 而 N 就是總共所有的 integer array。所以可以想像每下一層就是要從剩下的數字中挑一個放到 <code>sub</code>，所以這裡我用一個 <code>HashSet</code> 來記錄已經取出的數字。如此做到所有的數字都被拿完，也就是 <code>sub</code> 和 input array 一樣長，此時就把 <code>sub</code> clone 一份到 <code>result</code> 裡。並且回傳的時候要把自己放到 <code>sub</code> 尾端的數字 pop 掉，另外也要移除 <code>HashSet</code> 裡的同一個數字。這樣從底部回去的時候，之前選的字才能被之後 sub array 選到。</p>

<h3>Code</h3>
<div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="nf">permute</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;();</span>
        <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
        <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">DFS</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span> <span class="n">k</span> <span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">,</span> <span class="n">HashSet</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">h</span> <span class="o">,</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">sub</span><span class="o">){</span>

        <span class="k">if</span><span class="o">(</span><span class="n">k</span><span class="o">==</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">){</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;)</span><span class="n">sub</span><span class="o">.</span><span class="na">clone</span><span class="o">());</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span> <span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
            <span class="k">if</span><span class="o">(!</span><span class="n">h</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">])){</span>
                <span class="n">sub</span><span class="o">.</span><span class="na">addLast</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">h</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
                <span class="n">DFS</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span><span class="n">k</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">result</span><span class="o">,</span><span class="n">h</span><span class="o">,</span><span class="n">sub</span><span class="o">);</span>
                <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="n">sub</span><span class="o">.</span><span class="na">removeLast</span><span class="o">();</span>
                <span class="n">h</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">a</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>
	  ]]></description>
	</item>

	<item>
	  <title>Filter 初體驗</title>
	  <link>//Filter-%E5%88%9D%E9%AB%94%E9%A9%97</link>
	  <author>Ching Tsai</author>
	  <pubDate>2016-03-06T00:00:00+08:00</pubDate>
	  <guid>//Filter-%E5%88%9D%E9%AB%94%E9%A9%97</guid>
	  <description><![CDATA[
	     <p>由於本身就有再攝影，所以希望這個 Blog 的圖片儘量都能用自己拍的照片。我對於拍照期望就是能還原最原始當下的情況，所以以往對於濾鏡的使用都嗤之以鼻，認為自己不會用到。不過在客製這個 Blog 的時候，當我把之前 Template 的預設圖換成自己的圖的時候，就總是覺得哪裡怪怪的，挑來挑去都找不到適合的。後來才發現如過要用來裝飾 Blog 用普通色調的圖片就會現得格格不入。如此想想還是嘗試一下濾鏡。</p>

<p>原本打算用 <strong>MAC 照片</strong> 來調，雖然 <strong>照片</strong> 裡的工具用來修圖已經足以，不過如果要調色系的話卻太陽春且繁瑣。後來上網找了下發現了<a href="https://chrome.google.com/webstore/detail/pixlr-touch-up/jklljiahjgoglchglekebfljnmbaleig?hl=zh-tw">Pixlr Touch Up</a> 這個 <strong>自動桌子</strong> 出品的 <strong>Chrome App</strong> ， 不過這個 App bug 頗多，有機率會當掉，且如果圖太大會有雜線和做旋轉的時候會破圖，所以建議使用前先縮一下圖。不過裡面的濾鏡還算多元，對於我來說免費的 App 能做到這樣我已經很滿足了，以下列幾個自認為套的還不錯的幾張 Before After 的比較圖：</p>

<p><img src="assets/images/filter_asset_001.jpg" alt="fornt_page" title="Front page">
Blog 封面設計上要放上標語，所以就不適合太花俏的背景的顏色，所以我就使用 <code>Unicolor-&gt;Joyce</code> 把背景轉成單色系，來托襯標題。
<img src="assets/images/filter_asset_002.jpg" alt="fornt_page">
這張再拍攝的時候，其實是下著雨，不過由於我把快門調到 1/1250 ， 並且我用 <code>Classic-&gt;Peter</code> 把色調轉成冷冽，所以看起來頗有下雪的FU。
<img src="assets/images/filter_asset_003.jpg" alt="fornt_page">
這張是在大阪環球影城的霍格華茲拍攝的，原始的圖片看起就只是個陰森森的危樓，不過用 <code>Vintage-&gt;Kevin</code> 用誇張的對比，和飽和色使他一瞬間有了奇幻感。
<img src="assets/images/filter_asset_004.jpg" alt="fornt_page">
原本金碧輝煌的鐘面就已經很有架勢了，不過用 <code>Classic-&gt;Josh</code> 把色調轉成紅銅色，並加深陰影，也是別有風味。
<img src="assets/images/filter_asset_007.jpg" alt="fornt_page">
這個 <code>Classic-&gt;Hagrid</code> 用在食物上真的是犯規阿，可以看到右邊銳化很多，把鴨胸紋理，肉汁以及色澤都突顯出來，並加深不少飽和度，真的讓人胃口大開。</p>

<p>總結一下，我不難理解為什麼濾鏡會這麼受歡迎，有時候即使主題只是地上一株雜草，抑或是曝光調爛了一堆噪點，用個濾鏡東抹西抹一下，看起來是還很文青，真的很方便。不過在嘗試的時候，還是發現有些濾鏡過分調高飽和，或加上一堆暈輝，讓整畫面變得一沱混雜，所以濾鏡真的要慎選。</p>

	  ]]></description>
	</item>

	<item>
	  <title>Down The Rabbit Hole</title>
	  <link>//down-the-rabbit-hole</link>
	  <author>Ching Tsai</author>
	  <pubDate>1865-11-26T18:18:00+08:00</pubDate>
	  <guid>//down-the-rabbit-hole</guid>
	  <description><![CDATA[
	     <p>Alice was beginning to get very tired of sitting by her sister on the bank, and of having nothing to do: once or twice she had peeped into the book her sister was reading, but it had no pictures or conversations in it, &#39;and what is the use of a book,&#39; thought Alice &#39;without pictures or conversation?&#39;</p>

<p>So she was considering in her own mind (as well as she could, for the hot day made her feel very sleepy and stupid), whether the pleasure of making a daisy-chain would be worth the trouble of getting up and picking the daisies, when suddenly a White Rabbit with pink eyes ran close by her.</p>

<p>There was nothing so very remarkable in that; nor did Alice think it so very much out of the way to hear the Rabbit say to itself, &#39;Oh dear! Oh dear! I shall be late!&#39; (when she thought it over afterwards, it occurred to her that she ought to have wondered at this, but at the time it all seemed quite natural); but when the Rabbit actually took a watch out of its waistcoat-pocket, and looked at it, and then hurried on, Alice started to her feet, for it flashed across her mind that she had never before seen a rabbit with either a waistcoat-pocket, or a watch to take out of it, and burning with curiosity, she ran across the field after it, and fortunately was just in time to see it pop down a large rabbit-hole under the hedge.</p>

<p>In another moment down went Alice after it, never once considering how in the world she was to get out again.</p>

<p>The rabbit-hole went straight on like a tunnel for some way, and then dipped suddenly down, so suddenly that Alice had not a moment to think about stopping herself before she found herself falling down a very deep well.</p>

<p>Either the well was very deep, or she fell very slowly, for she had plenty of time as she went down to look about her and to wonder what was going to happen next. First, she tried to look down and make out what she was coming to, but it was too dark to see anything; then she looked at the sides of the well, and noticed that they were filled with cupboards and book-shelves; here and there she saw maps and pictures hung upon pegs. She took down a jar from one of the shelves as she passed; it was labelled &#39;ORANGE MARMALADE&#39;, but to her great disappointment it was empty: she did not like to drop the jar for fear of killing somebody, so managed to put it into one of the cupboards as she fell past it.</p>

<p>&#39;Well!&#39; thought Alice to herself, &#39;after such a fall as this, I shall think nothing of tumbling down stairs! How brave they&#39;ll all think me at home! Why, I wouldn&#39;t say anything about it, even if I fell off the top of the house!&#39; (Which was very likely true.)</p>

<p>Down, down, down. Would the fall never come to an end! &#39;I wonder how many miles I&#39;ve fallen by this time?&#39; she said aloud. &#39;I must be getting somewhere near the centre of the earth. Let me see: that would be four thousand miles down, I think—&#39; (for, you see, Alice had learnt several things of this sort in her lessons in the schoolroom, and though this was not a very good opportunity for showing off her knowledge, as there was no one to listen to her, still it was good practice to say it over) &#39;—yes, that&#39;s about the right distance—but then I wonder what Latitude or Longitude I&#39;ve got to?&#39; (Alice had no idea what Latitude was, or Longitude either, but thought they were nice grand words to say.)</p>

<p>Presently she began again. &#39;I wonder if I shall fall right through the earth! How funny it&#39;ll seem to come out among the people that walk with their heads downward! The Antipathies, I think—&#39; (she was rather glad there was no one listening, this time, as it didn&#39;t sound at all the right word) &#39;—but I shall have to ask them what the name of the country is, you know. Please, Ma&#39;am, is this New Zealand or Australia?&#39; (and she tried to curtsey as she spoke—fancy curtseying as you&#39;re falling through the air! Do you think you could manage it?) &#39;And what an ignorant little girl she&#39;ll think me for asking! No, it&#39;ll never do to ask: perhaps I shall see it written up somewhere.&#39;</p>

<p>Down, down, down. There was nothing else to do, so Alice soon began talking again. &#39;Dinah&#39;ll miss me very much to-night, I should think!&#39; (Dinah was the cat.) &#39;I hope they&#39;ll remember her saucer of milk at tea-time. Dinah my dear! I wish you were down here with me! There are no mice in the air, I&#39;m afraid, but you might catch a bat, and that&#39;s very like a mouse, you know. But do cats eat bats, I wonder?&#39; And here Alice began to get rather sleepy, and went on saying to herself, in a dreamy sort of way, &#39;Do cats eat bats? Do cats eat bats?&#39; and sometimes, &#39;Do bats eat cats?&#39; for, you see, as she couldn&#39;t answer either question, it didn&#39;t much matter which way she put it. She felt that she was dozing off, and had just begun to dream that she was walking hand in hand with Dinah, and saying to her very earnestly, &#39;Now, Dinah, tell me the truth: did you ever eat a bat?&#39; when suddenly, thump! thump! down she came upon a heap of sticks and dry leaves, and the fall was over.</p>

<p>Alice was not a bit hurt, and she jumped up on to her feet in a moment: she looked up, but it was all dark overhead; before her was another long passage, and the White Rabbit was still in sight, hurrying down it. There was not a moment to be lost: away went Alice like the wind, and was just in time to hear it say, as it turned a corner, &#39;Oh my ears and whiskers, how late it&#39;s getting!&#39; She was close behind it when she turned the corner, but the Rabbit was no longer to be seen: she found herself in a long, low hall, which was lit up by a row of lamps hanging from the roof.</p>

<p>There were doors all round the hall, but they were all locked; and when Alice had been all the way down one side and up the other, trying every door, she walked sadly down the middle, wondering how she was ever to get out again.</p>

<p>Suddenly she came upon a little three-legged table, all made of solid glass; there was nothing on it except a tiny golden key, and Alice&#39;s first thought was that it might belong to one of the doors of the hall; but, alas! either the locks were too large, or the key was too small, but at any rate it would not open any of them.</p>

<p>However, on the second time round, she came upon a low curtain she had not noticed before, and behind it was a little door about fifteen inches high: she tried the little golden key in the lock, and to her great delight it fitted!</p>

<p>Alice opened the door and found that it led into a small passage, not much larger than a rat-hole: she knelt down and looked along the passage into the loveliest garden you ever saw. How she longed to get out of that dark hall, and wander about among those beds of bright flowers and those cool fountains, but she could not even get her head though the doorway; &#39;and even if my head would go through,&#39; thought poor Alice, &#39;it would be of very little use without my shoulders. Oh, how I wish I could shut up like a telescope! I think I could, if I only know how to begin.&#39; For, you see, so many out-of-the-way things had happened lately, that Alice had begun to think that very few things indeed were really impossible.</p>

<p>There seemed to be no use in waiting by the little door, so she went back to the table, half hoping she might find another key on it, or at any rate a book of rules for shutting people up like telescopes: this time she found a little bottle on it, (&#39;which certainly was not here before,&#39; said Alice,) and round the neck of the bottle was a paper label, with the words &#39;DRINK ME&#39; beautifully printed on it in large letters.</p>

<p>It was all very well to say &#39;Drink me,&#39; but the wise little Alice was not going to do that in a hurry. &#39;No, I&#39;ll look first,&#39; she said, &#39;and see whether it&#39;s marked &quot;poison&quot; or not&#39;; for she had read several nice little histories about children who had got burnt, and eaten up by wild beasts and other unpleasant things, all because they would not remember the simple rules their friends had taught them: such as, that a red-hot poker will burn you if you hold it too long; and that if you cut your finger very deeply with a knife, it usually bleeds; and she had never forgotten that, if you drink much from a bottle marked &#39;poison,&#39; it is almost certain to disagree with you, sooner or later.</p>

<p>However, this bottle was not marked &#39;poison,&#39; so Alice ventured to taste it, and finding it very nice, (it had, in fact, a sort of mixed flavour of cherry-tart, custard, pine-apple, roast turkey, toffee, and hot buttered toast,) she very soon finished it off.</p>

<p>&#39;What a curious feeling!&#39; said Alice; &#39;I must be shutting up like a telescope.&#39;</p>

<p>And so it was indeed: she was now only ten inches high, and her face brightened up at the thought that she was now the right size for going through the little door into that lovely garden. First, however, she waited for a few minutes to see if she was going to shrink any further: she felt a little nervous about this; &#39;for it might end, you know,&#39; said Alice to herself, &#39;in my going out altogether, like a candle. I wonder what I should be like then?&#39; And she tried to fancy what the flame of a candle is like after the candle is blown out, for she could not remember ever having seen such a thing.</p>

<p>After a while, finding that nothing more happened, she decided on going into the garden at once; but, alas for poor Alice! when she got to the door, she found she had forgotten the little golden key, and when she went back to the table for it, she found she could not possibly reach it: she could see it quite plainly through the glass, and she tried her best to climb up one of the legs of the table, but it was too slippery; and when she had tired herself out with trying, the poor little thing sat down and cried.</p>

<p>&#39;Come, there&#39;s no use in crying like that!&#39; said Alice to herself, rather sharply; &#39;I advise you to leave off this minute!&#39; She generally gave herself very good advice, (though she very seldom followed it), and sometimes she scolded herself so severely as to bring tears into her eyes; and once she remembered trying to box her own ears for having cheated herself in a game of croquet she was playing against herself, for this curious child was very fond of pretending to be two people. &#39;But it&#39;s no use now,&#39; thought poor Alice, &#39;to pretend to be two people! Why, there&#39;s hardly enough of me left to make one respectable person!&#39;</p>

<p>Soon her eye fell on a little glass box that was lying under the table: she opened it, and found in it a very small cake, on which the words &#39;EAT ME&#39; were beautifully marked in currants. &#39;Well, I&#39;ll eat it,&#39; said Alice, &#39;and if it makes me grow larger, I can reach the key; and if it makes me grow smaller, I can creep under the door; so either way I&#39;ll get into the garden, and I don&#39;t care which happens!&#39;</p>

<p>She ate a little bit, and said anxiously to herself, &#39;Which way? Which way?&#39;, holding her hand on the top of her head to feel which way it was growing, and she was quite surprised to find that she remained the same size: to be sure, this generally happens when one eats cake, but Alice had got so much into the way of expecting nothing but out-of-the-way things to happen, that it seemed quite dull and stupid for life to go on in the common way.</p>

<p>So she set to work, and very soon finished off the cake.</p>

<p>By <strong>Lewis Carrol</strong></p>

<p>An English writer, mathematician, logician, Anglican deacon and photographer, best know for writing about Alice.</p>

	  ]]></description>
	</item>


</channel>
</rss>
